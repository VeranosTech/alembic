# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2019, Mike Bayer
# This file is distributed under the same license as the Alembic package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Alembic 1.0.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-04 13:27+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../branches.rst:4
msgid "Working with Branches"
msgstr ""

#: ../branches.rst:6
msgid ""
"Alembic 0.7.0 features an all-new versioning model that fully supports "
"branch points, merge points, and long-lived, labeled branches, including "
"independent branches originating from multiple bases. A great emphasis "
"has been placed on there being almost no impact on the existing Alembic "
"workflow, including that all commands work pretty much the same as they "
"did before, the format of migration files doesn't require any change "
"(though there are some changes that are recommended), and even the "
"structure of the ``alembic_version`` table does not change at all.  "
"However, most alembic commands now offer new features which will break "
"out an Alembic environment into \"branch mode\", where things become a "
"lot more intricate.   Working in \"branch mode\" should be considered as "
"a \"beta\" feature, with many new paradigms and use cases still to be "
"stress tested in the wild. Please tread lightly!"
msgstr ""

#: ../branches.rst:23
msgid ""
"A **branch** describes a point in a migration stream when two or more "
"versions refer to the same parent migration as their anscestor.  Branches"
" occur naturally when two divergent source trees, both containing Alembic"
" revision files created independently within those source trees, are "
"merged together into one.  When this occurs, the challenge of a branch is"
" to **merge** the branches into a single series of changes, so that "
"databases established from either source tree individually can be "
"upgraded to reference the merged result equally.  Another scenario where "
"branches are present are when we create them directly; either at some "
"point in the migration stream we'd like different series of migrations to"
" be managed independently (e.g. we create a tree), or we'd like separate "
"migration streams for different features starting at the root (e.g. a "
"*forest*).  We'll illustrate all of these cases, starting with the most "
"common which is a source-merge-originated branch that we'll merge."
msgstr ""

#: ../branches.rst:38
msgid ""
"Starting with the \"account table\" example we began in "
":ref:`create_migration`, assume we have our basemost version "
"``1975ea83b712``, which leads into the second revision ``ae1027a6acf``, "
"and the migration files for these two revisions are checked into our "
"source repository. Consider if we merged into our source repository "
"another code branch which contained a revision for another table called "
"``shopping_cart``.  This revision was made against our first Alembic "
"revision, the one that generated ``account``.   After loading the second "
"source tree in, a new file ``27c6a30d7c24_add_shopping_cart_table.py`` "
"exists within our ``versions`` directory. Both it, as well as "
"``ae1027a6acf_add_a_column.py``, reference "
"``1975ea83b712_add_account_table.py`` as the \"downgrade\" revision.  To "
"illustrate::"
msgstr ""

#: ../branches.rst:56
msgid ""
"Above, we can see ``1975ea83b712`` is our **branch point**; two distinct "
"versions both refer to it as its parent.  The Alembic command "
"``branches`` illustrates this fact::"
msgstr ""

#: ../branches.rst:75
msgid ""
"History shows it too, illustrating two ``head`` entries as well as a "
"``branchpoint``::"
msgstr ""

#: ../branches.rst:83
msgid "We can get a view of just the current heads using ``alembic heads``::"
msgstr ""

#: ../branches.rst:106
msgid ""
"If we try to run an ``upgrade`` to the usual end target of ``head``, "
"Alembic no longer considers this to be an unambiguous command.  As we "
"have more than one ``head``, the ``upgrade`` command wants us to provide "
"more information::"
msgstr ""

#: ../branches.rst:114
msgid ""
"The ``upgrade`` command gives us quite a few options in which we can "
"proceed with our upgrade, either giving it information on *which* head "
"we'd like to upgrade towards, or alternatively stating that we'd like "
"*all* heads to be upgraded towards at once.  However, in the typical case"
" of two source trees being merged, we will want to pursue a third option,"
" which is that we can **merge** these branches."
msgstr ""

#: ../branches.rst:122
msgid "Merging Branches"
msgstr ""

#: ../branches.rst:124
msgid ""
"An Alembic merge is a migration file that joins two or more \"head\" "
"files together. If the two branches we have right now can be said to be a"
" \"tree\" structure, introducing this merge file will turn it into a "
"\"diamond\" structure::"
msgstr ""

#: ../branches.rst:135
msgid ""
"We create the merge file using ``alembic merge``; with this command, we "
"can pass to it an argument such as ``heads``, meaning we'd like to merge "
"all heads.  Or, we can pass it individual revision numbers sequentally::"
msgstr ""

#: ../branches.rst:142
msgid ""
"Looking inside the new file, we see it as a regular migration file, with "
"the only new twist is that ``down_revision`` points to both revisions::"
msgstr ""

#: ../branches.rst:169
msgid ""
"This file is a regular migration file, and if we wish to, we may place "
":class:`.Operations` directives into the ``upgrade()`` and "
"``downgrade()`` functions like any other migration file.  Though it is "
"probably best to limit the instructions placed here only to those that "
"deal with any kind of reconciliation that is needed between the two "
"merged branches, if any."
msgstr ""

#: ../branches.rst:175
msgid ""
"The ``heads`` command now illustrates that the multiple heads in our "
"``versions/`` directory have been resolved into our new head::"
msgstr ""

#: ../branches.rst:189
msgid "History shows a similar result, as the mergepoint becomes our head::"
msgstr ""

#: ../branches.rst:197
msgid "With a single ``head`` target, a generic ``upgrade`` can proceed::"
msgstr ""

msgid "merge mechanics"
msgstr ""

#: ../branches.rst:210
msgid ""
"The upgrade process traverses through all of our migration files using a"
"  **topological sorting** algorithm, treating the list of migration files"
" not as a linked list, but as a **directed acyclic graph**.  The starting"
" points of this traversal are the **current heads** within our database, "
"and the end point is the \"head\" revision or revisions specified."
msgstr ""

#: ../branches.rst:216
msgid ""
"When a migration proceeds across a point at which there are multiple "
"heads, the ``alembic_version`` table will at that point store *multiple* "
"rows, one for each head.  Our migration process above will emit SQL "
"against ``alembic_version`` along these lines:"
msgstr ""

#: ../branches.rst:236
msgid ""
"At the point at which both ``27c6a30d7c24`` and ``ae1027a6acf`` exist "
"within our database, both values are present in ``alembic_version``, "
"which now has two rows.   If we upgrade to these two versions alone, then"
" stop and run ``alembic current``, we will see this::"
msgstr ""

#: ../branches.rst:263
msgid ""
"A key advantage to the ``merge`` process is that it will run equally well"
" on databases that were present on version ``ae1027a6acf`` alone, versus "
"databases that were present on version ``27c6a30d7c24`` alone; whichever "
"version was not yet applied, will be applied before the merge point can "
"be crossed.   This brings forth a way of thinking about a merge file, as "
"well as about any Alembic revision file.  As they are considered to be "
"\"nodes\" within a set that is subject to topological sorting, each "
"\"node\" is a point that cannot be crossed until all of its dependencies "
"are satisfied."
msgstr ""

#: ../branches.rst:273
msgid ""
"Prior to Alembic's support of merge points, the use case of databases "
"sitting on different heads was basically impossible to reconcile; having "
"to manually splice the head files together invariably meant that one "
"migration would occur before the other, thus being incompatible with "
"databases that were present on the other migration."
msgstr ""

#: ../branches.rst:280
msgid "Working with Explicit Branches"
msgstr ""

#: ../branches.rst:282
msgid ""
"The ``alembic upgrade`` command hinted at other options besides merging "
"when dealing with multiple heads.  Let's back up and assume we're back "
"where we have as our heads just ``ae1027a6acf`` and ``27c6a30d7c24``::"
msgstr ""

#: ../branches.rst:290
msgid ""
"Earlier, when we did ``alembic upgrade head``, it gave us an error which "
"suggested ``please specify a specific target revision, "
"'<branchname>@head' to narrow to a specific head, or 'heads' for all "
"heads`` in order to proceed without merging.   Let's cover those cases."
msgstr ""

#: ../branches.rst:296
msgid "Referring to all heads at once"
msgstr ""

#: ../branches.rst:298
msgid ""
"The ``heads`` identifier is a lot like ``head``, except it explicitly "
"refers to *all* heads at once.  That is, it's like telling Alembic to do "
"the operation for both ``ae1027a6acf`` and ``27c6a30d7c24`` "
"simultaneously.  If we started from a fresh database and ran ``upgrade "
"heads`` we'd see::"
msgstr ""

#: ../branches.rst:310
msgid ""
"Since we've upgraded to ``heads``, and we do in fact have more than one "
"head, that means these two distinct heads are now in our "
"``alembic_version`` table. We can see this if we run ``alembic "
"current``::"
msgstr ""

#: ../branches.rst:318
msgid ""
"That means there's two rows in ``alembic_version`` right now.  If we "
"downgrade one step at a time, Alembic will **delete** from the "
"``alembic_version`` table each branch that's closed out, until only one "
"branch remains; then it will continue updating the single value down to "
"the previous versions::"
msgstr ""

#: ../branches.rst:341
msgid "Referring to a Specific Version"
msgstr ""

#: ../branches.rst:343
msgid ""
"We can pass a specific version number to ``upgrade``.  Alembic will "
"ensure that all revisions upon which this version depends are invoked, "
"and nothing more. So if we ``upgrade`` either to ``27c6a30d7c24`` or "
"``ae1027a6acf`` specifically, it guarantees that ``1975ea83b712`` will "
"have been applied, but not that any \"sibling\" versions are applied::"
msgstr ""

#: ../branches.rst:353
msgid ""
"With ``1975ea83b712`` and ``27c6a30d7c24`` applied, ``ae1027a6acf`` is "
"just a single additional step::"
msgstr ""

#: ../branches.rst:360
msgid "Working with Branch Labels"
msgstr ""

#: ../branches.rst:362
msgid ""
"To satisfy the use case where an environment has long-lived branches, "
"especially independent branches as will be discussed in the next section,"
" Alembic supports the concept of **branch labels**.   These are string "
"values that are present within the migration file, using the new "
"identifier ``branch_labels``. For example, if we want to refer to the "
"\"shopping cart\" branch using the name \"shoppingcart\", we can add that"
" name to our file ``27c6a30d7c24_add_shopping_cart_table.py``::"
msgstr ""

#: ../branches.rst:381
msgid ""
"The ``branch_labels`` attribute refers to a string name, or a tuple of "
"names, which will now apply to this revision, all descendants of this "
"revision, as well as all ancestors of this revision up until the "
"preceding branch point, in this case ``1975ea83b712``.  We can see the "
"``shoppingcart`` label applied to this revision::"
msgstr ""

#: ../branches.rst:392
msgid ""
"With the label applied, the name ``shoppingcart`` now serves as an alias "
"for the ``27c6a30d7c24`` revision specifically.  We can illustrate this "
"by showing it with ``alembic show``::"
msgstr ""

#: ../branches.rst:408
msgid ""
"However, when using branch labels, we usually want to use them using a "
"syntax known as \"branch at\" syntax; this syntax allows us to state that"
" we want to use a specific revision, let's say a \"head\" revision, in "
"terms of a *specific* branch.  While normally, we can't refer to "
"``alembic upgrade head`` when there's multiple heads, we *can* refer to "
"this head specifcally using ``shoppingcart@head`` syntax::"
msgstr ""

#: ../branches.rst:418
msgid ""
"The ``shoppingcart@head`` syntax becomes important to us if we wish to "
"add new migration files to our versions directory while maintaining "
"multiple branches.  Just like the ``upgrade`` command, if we attempted to"
" add a new revision file to our multiple-heads layout without a specific "
"parent revision, we'd get a familiar error::"
msgstr ""

#: ../branches.rst:428
msgid ""
"The ``alembic revision`` command is pretty clear in what we need to do; "
"to add our new revision specifically to the ``shoppingcart`` branch, we "
"use the ``--head`` argument, either with the specific revision identifier"
" ``27c6a30d7c24``, or more generically using our branchname "
"``shoppingcart@head``::"
msgstr ""

#: ../branches.rst:436
msgid ""
"``alembic history`` shows both files now part of the ``shoppingcart`` "
"branch::"
msgstr ""

#: ../branches.rst:444
msgid "We can limit our history operation just to this branch as well::"
msgstr ""

#: ../branches.rst:450
msgid ""
"If we want to illustrate the path of ``shoppingcart`` all the way from "
"the base, we can do that as follows::"
msgstr ""

#: ../branches.rst:458
msgid ""
"We can run this operation from the \"base\" side as well, but we get a "
"different result::"
msgstr ""

#: ../branches.rst:467
msgid ""
"When we list from ``shoppingcart@base`` without an endpoint, it's really "
"shorthand for ``-r shoppingcart@base:heads``, e.g. all heads, and since "
"``shoppingcart@base`` is the same \"base\" shared by the ``ae1027a6acf`` "
"revision, we get that revision in our listing as well.  The "
"``<branchname>@base`` syntax can be useful when we are dealing with "
"individual bases, as we'll see in the next section."
msgstr ""

#: ../branches.rst:474
msgid ""
"The ``<branchname>@head`` format can also be used with revision numbers "
"instead of branch names, though this is less convenient.  If we wanted to"
" add a new revision to our branch that includes the un-labeled "
"``ae1027a6acf``, if this weren't a head already, we could ask for the "
"\"head of the branch that includes ``ae1027a6acf``\" as follows::"
msgstr ""

#: ../branches.rst:484
msgid "More Label Syntaxes"
msgstr ""

#: ../branches.rst:486
msgid ""
"The ``heads`` symbol can be combined with a branch label, in the case "
"that your labeled branch itself breaks off into multiple branches::"
msgstr ""

#: ../branches.rst:491
msgid ""
"Relative identifiers, as introduced in :ref:`relative_migrations`, work "
"with labels too.  For example, upgrading to ``shoppingcart@+2`` means to "
"upgrade from current heads on \"shoppingcart\" upwards two revisions::"
msgstr ""

#: ../branches.rst:497
msgid "This kind of thing works from history as well::"
msgstr ""

#: ../branches.rst:501
msgid ""
"The newer ``relnum+delta`` format can be combined as well, for example if"
" we wanted to list along ``shoppingcart`` up until two revisions before "
"the head::"
msgstr ""

#: ../branches.rst:510
msgid "Working with Multiple Bases"
msgstr ""

#: ../branches.rst:512
msgid ""
"The multiple base feature is intended to allow for multiple Alembic "
"versioning lineages which **share the same alembic_version table**.  This"
" is so that individual revisions within the lineages can have cross-"
"dependencies on each other.   For the simpler case where one project has "
"multiple, **completely independent** revision lineages that refer to "
"**separate** alembic_version tables, see the example in "
":ref:`multiple_environments`."
msgstr ""

#: ../branches.rst:519
msgid ""
"We've seen in the previous section that ``alembic upgrade`` is fine if we"
" have multiple heads, ``alembic revision`` allows us to tell it which "
"\"head\" we'd like to associate our new revision file with, and branch "
"labels allow us to assign names to branches that we can use in subsequent"
" commands. Let's put all these together and refer to a new \"base\", that"
" is, a whole new tree of revision files that will be semi-independent of "
"the account/shopping cart revisions we've been working with.  This new "
"tree will deal with database tables involving \"networking\"."
msgstr ""

#: ../branches.rst:531
msgid "Setting up Multiple Version Directories"
msgstr ""

#: ../branches.rst:533
msgid ""
"While optional, it is often the case that when working with multiple "
"bases, we'd like different sets of version files to exist within their "
"own directories; typically, if an application is organized into several "
"sub-modules, each one would have a version directory containing "
"migrations pertinent to that module.  So to start out, we can edit "
"``alembic.ini`` to refer to multiple directories;  we'll also state the "
"current ``versions`` directory as one of them::"
msgstr ""

#: ../branches.rst:546
#, python-format
msgid ""
"The new directory ``%(here)s/model/networking`` is in terms of where the "
"``alembic.ini`` file is, as we are using the symbol ``%(here)s`` which "
"resolves to this location.   When we create our first new revision "
"targeted at this directory, ``model/networking`` will be created "
"automatically if it does not exist yet.  Once we've created a revision "
"here, the path is used automatically when generating subsequent revision "
"files that refer to this revision tree."
msgstr ""

#: ../branches.rst:555
msgid "Creating a Labeled Base Revision"
msgstr ""

#: ../branches.rst:557
msgid ""
"We also want our new branch to have its own name, and for that we want to"
" apply a branch label to the base.  In order to achieve this using the "
"``alembic revision`` command without editing, we need to ensure our "
"``script.py.mako`` file, used for generating new revision files, has the "
"appropriate substitutions present. If Alembic version 0.7.0 or greater "
"was used to generate the original migration environment, this is already "
"done.  However when working with an older environment, ``script.py.mako``"
" needs to have this directive added, typically underneath the "
"``down_revision`` directive::"
msgstr ""

#: ../branches.rst:574
msgid ""
"With this in place, we can create a new revision file, starting up a "
"branch that will deal with database tables involving networking; we "
"specify the ``--head`` version of ``base``, a ``--branch-label`` of "
"``networking``, and the directory we want this first revision file to be "
"placed in with ``--version-path``::"
msgstr ""

#: ../branches.rst:584
msgid ""
"If we ran the above command and we didn't have the newer "
"``script.py.mako`` directive, we'd get this error::"
msgstr ""

#: ../branches.rst:592
msgid ""
"When we receive the above error, and we would like to try again, we need "
"to either **delete** the incorrectly generated file in order to run "
"``revision`` again, *or* we can edit the "
"``3cac04ae8714_create_networking_branch.py`` directly to add the "
"``branch_labels`` in of our choosing."
msgstr ""

#: ../branches.rst:598
msgid "Running with Multiple Bases"
msgstr ""

#: ../branches.rst:600
msgid ""
"Once we have a new, permanent (for as long as we desire it to be) base in"
" our system, we'll always have multiple heads present::"
msgstr ""

#: ../branches.rst:608
msgid ""
"When we want to add a new revision file to ``networking``, we specify "
"``networking@head`` as the ``--head``.  The appropriate version directory"
" is now selected automatically based on the head we choose::"
msgstr ""

#: ../branches.rst:615
msgid ""
"It's important that we refer to the head using ``networking@head``; if we"
" only refer to ``networking``, that refers to only ``3cac04ae8714`` "
"specifically; if we specify this and it's not a head, ``alembic "
"revision`` will make sure we didn't mean to specify the head::"
msgstr ""

#: ../branches.rst:624
msgid ""
"As mentioned earlier, as this base is independent, we can view its "
"history from the base using ``history -r networking@base:``::"
msgstr ""

#: ../branches.rst:632
msgid ""
"At the moment, this is the same output we'd get at this point if we used "
"``-r :networking@head``.  However, that will change later on as we use "
"additional directives."
msgstr ""

#: ../branches.rst:636
msgid ""
"We may now run upgrades or downgrades freely, among individual branches "
"(let's assume a clean database again)::"
msgstr ""

#: ../branches.rst:644
msgid "or against the whole thing using ``heads``::"
msgstr ""

#: ../branches.rst:654
msgid "Branch Dependencies"
msgstr ""

#: ../branches.rst:656
msgid ""
"When working with multiple roots, it is expected that these different "
"revision streams will need to refer to one another.   For example, a new "
"revision in ``networking`` which needs to refer to the ``account`` table "
"will want to establish ``55af2cb1c267, add another account column``, the "
"last revision that works with the account table, as a dependency.   From "
"a graph perspective, this means nothing more that the new file will "
"feature both ``55af2cb1c267, add another account column`` and "
"``29f859a13ea, add DNS table`` as \"down\" revisions, and looks just as "
"though we had merged these two branches together.  However, we don't want"
" to consider these as \"merged\"; we want the two revision streams to "
"*remain independent*, even though a version in ``networking`` is going to"
" reach over into the other stream.  To support this use case, Alembic "
"provides a directive known as ``depends_on``, which allows a revision "
"file to refer to another as a \"dependency\", very similar to an entry in"
" ``down_revision`` from a graph perspective, but different from a "
"semantic perspective."
msgstr ""

#: ../branches.rst:673
msgid ""
"To use ``depends_on``, we can specify it as part of our ``alembic "
"revision`` command::"
msgstr ""

#: ../branches.rst:679
msgid "Within our migration file, we'll see this new directive present::"
msgstr ""

#: ../branches.rst:687
msgid ""
"``depends_on`` may be either a real revision number or a branch name.  "
"When specified at the command line, a resolution from a partial revision "
"number will work as well.   It can refer to any number of dependent "
"revisions as well; for example, if we were to run the command::"
msgstr ""

#: ../branches.rst:698
msgid "We'd see inside the file::"
msgstr ""

#: ../branches.rst:706
msgid ""
"We also can of course add or alter this value within the file manually "
"after it is generated, rather than using the ``--depends-on`` argument."
msgstr ""

#: ../branches.rst:709
msgid ""
"The ``depends_on`` attribute may be set directly from the ``alembic "
"revision`` command, rather than editing the file directly.  "
"``depends_on`` identifiers may also be specified as branch names at the "
"command line or directly within the migration file. The values may be "
"specified as partial revision numbers from the command line which will be"
" resolved to full revision numbers in the output file."
msgstr ""

#: ../branches.rst:716
msgid ""
"We can see the effect this directive has when we view the history of the "
"``networking`` branch in terms of \"heads\", e.g., all the revisions that"
" are descendants::"
msgstr ""

#: ../branches.rst:729
msgid ""
"What we see is that the full history of the ``networking`` branch, in "
"terms of an \"upgrade\" to the \"head\", will include that the tree "
"building up ``55af2cb1c267, add another account column`` will be pulled "
"in first.   Interstingly, we don't see this displayed when we display "
"history in the other direction, e.g. from ``networking@base``::"
msgstr ""

#: ../branches.rst:741
msgid ""
"The reason for the discrepancy is that displaying history from the base "
"shows us what would occur if we ran a downgrade operation, instead of an "
"upgrade.  If we downgraded all the files in ``networking`` using "
"``networking@base``, the dependencies aren't affected, they're left in "
"place."
msgstr ""

#: ../branches.rst:746
msgid "We also see something odd if we view ``heads`` at the moment::"
msgstr ""

#: ../branches.rst:753
msgid ""
"The head file that we used as a \"dependency\", ``55af2cb1c267``, is "
"displayed as an \"effective\" head, which we can see also in the history "
"display earlier. What this means is that at the moment, if we were to "
"upgrade all versions to the top, the ``55af2cb1c267`` revision number "
"would not actually be present in the ``alembic_version`` table; this is "
"because it does not have a branch of its own subsequent to the "
"``2a95102259be`` revision which depends on it::"
msgstr ""

#: ../branches.rst:768
msgid ""
"The entry is still displayed in ``alembic heads`` because Alembic knows "
"that even though this revision isn't a \"real\" head, it's still "
"something that we developers consider semantically to be a head, so it's "
"displayed, noting its special status so that we don't get quite as "
"confused when we don't see it within ``alembic current``."
msgstr ""

#: ../branches.rst:774
msgid ""
"If we add a new revision onto ``55af2cb1c267``, the branch again becomes "
"a \"real\" branch which can have its own entry in the database::"
msgstr ""

#: ../branches.rst:789
msgid "For posterity, the revision tree now looks like::"
msgstr ""

#: ../branches.rst:816
msgid ""
"If there's any point to be made here, it's if you are too freely "
"branching, merging and labeling, things can get pretty crazy!  Hence the "
"branching system should be used carefully and thoughtfully for best "
"results."
msgstr ""

