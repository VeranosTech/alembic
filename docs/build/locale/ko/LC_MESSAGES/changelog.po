# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2019, Mike Bayer
# This file is distributed under the same license as the Alembic package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Alembic 1.0.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-04 13:27+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../changelog.rst:4
msgid "Changelog"
msgstr ""

#: ../unreleased:5
msgid ""
"Removed use of deprecated ``force`` parameter for SQLAlchemy quoting "
"functions as this parameter will be removed in a future release. Pull "
"request courtesy Parth Shandilya(ParthS007)."
msgstr ""

#: ../changelog.rst:18
msgid ""
"Fixed issue in new comment support where autogenerated Python code for "
"comments wasn't using ``repr()`` thus causing issues with quoting.  Pull "
"request courtesy Damien Garaud."
msgstr ""

#: ../changelog.rst:30
msgid ""
"Added Table and Column level comments for supported backends. New methods"
" :meth:`.Operations.create_table_comment` and "
":meth:`.Operations.drop_table_comment` are added.  A new arguments "
":paramref:`.Operations.alter_column.comment` and "
":paramref:`.Operations.alter_column.existing_comment` are added to "
":meth:`.Operations.alter_column`.   Autogenerate support is also added to"
" ensure comment add/drops from tables and columns are generated as well "
"as that :meth:`.Operations.create_table`, :meth:`.Operations.add_column` "
"both include the comment field from the source :class:`.Table` or "
":class:`.Column` object."
msgstr ""

#: ../changelog.rst:49
msgid ""
"Resolved remaining Python 3 deprecation warnings, covering the use of "
"inspect.formatargspec() with a vendored version copied from the Python "
"standard library, importing collections.abc above Python 3.3 when testing"
" against abstract base classes, fixed one occurrence of log.warn(), as "
"well as a few invalid escape sequences."
msgstr ""

#: ../changelog.rst:63
msgid ""
"Code hosting has been moved to GitHub, at "
"https://github.com/sqlalchemy/alembic.  Additionally, the main Alembic "
"website documentation URL is now https://alembic.sqlalchemy.org."
msgstr ""

#: ../changelog.rst:76
msgid ""
"Fixed regression caused by :ticket:`513`, where the logic to consume "
"``mssql_include`` was not correctly interpreting the case where the flag "
"was not present, breaking the ``op.create_index`` directive for SQL "
"Server as a whole."
msgstr ""

#: ../changelog.rst:89
msgid ""
"The ``system=True`` flag on :class:`.Column`, used primarily in "
"conjunction with the Postgresql \"xmin\" column, now renders within the "
"autogenerate render process, allowing the column to be excluded from DDL."
"  Additionally, adding a system=True column to a model will produce no "
"autogenerate diff as this column is implicitly present in the database."
msgstr ""

#: ../changelog.rst:99
msgid ""
"Fixed issue where usage of the SQL Server ``mssql_include`` option within"
" a :meth:`.Operations.create_index` would raise a KeyError, as the "
"additional column(s) need to be added to the table object used by the "
"construct internally."
msgstr ""

#: ../changelog.rst:112
msgid ""
"Fixed an issue where revision descriptions were essentially being "
"formatted twice. Any revision description that contained characters like "
"%, writing output to stdout will fail because the call to "
"config.print_stdout attempted to format any additional args passed to the"
" function. This fix now only applies string formatting if any args are "
"provided along with the output text."
msgstr ""

#: ../changelog.rst:124
msgid ""
"Fixed issue where removed method ``union_update()`` was used when a "
"customized :class:`.MigrationScript` instance included entries in the "
"``.imports`` data member, raising an AttributeError."
msgstr ""

#: ../changelog.rst:139
msgid ""
"For Alembic 1.0, Python 2.6 / 3.3 support is being dropped, allowing a "
"fixed setup.py to be built as well as universal wheels.  Pull request "
"courtesy Hugo."
msgstr ""

#: ../changelog.rst:149
msgid ""
"With the 1.0 release, Alembic's minimum SQLAlchemy support version moves "
"to 0.9.0, previously 0.7.9."
msgstr ""

#: ../changelog.rst:156
msgid ""
"Fixed issue in batch where dropping a primary key column, then adding it "
"back under the same name but without the primary_key flag, would not "
"remove it from the existing PrimaryKeyConstraint.  If a new "
"PrimaryKeyConstraint is added, it is used as-is, as was the case before."
msgstr ""

#: ../changelog.rst:168
msgid ""
"The \"op.drop_constraint()\" directive will now render using ``repr()`` "
"for the schema name, in the same way that \"schema\" renders for all the "
"other op directives.  Pull request courtesy Denis Kataev."
msgstr ""

#: ../changelog.rst:176
msgid ""
"Added basic capabilities for external dialects to support rendering of "
"\"nested\" types, like arrays, in a manner similar to that of the "
"Postgresql dialect."
msgstr ""

#: ../changelog.rst:183
msgid ""
"Fixed issue where \"autoincrement=True\" would not render for a column "
"that specified it, since as of SQLAlchemy 1.1 this is no longer the "
"default value for \"autoincrement\".  Note the behavior only takes effect"
" against the SQLAlchemy 1.1.0 and higher; for pre-1.1 SQLAlchemy, "
"\"autoincrement=True\" does not render as was the case before. Pull "
"request courtesy  Elad Almos."
msgstr ""

#: ../changelog.rst:197
msgid ""
"Added new flag ``--indicate-current`` to the ``alembic history`` command."
" When listing versions, it will include the token \"(current)\" to "
"indicate the given version is a current head in the target database.  "
"Pull request courtesy Kazutaka Mise."
msgstr ""

#: ../changelog.rst:206
msgid ""
"The fix for :ticket:`455` in version 0.9.6 involving MySQL server default"
" comparison was entirely non functional, as the test itself was also "
"broken and didn't reveal that it wasn't working. The regular expression "
"to compare server default values like CURRENT_TIMESTAMP to "
"current_timestamp() is repaired."
msgstr ""

#: ../changelog.rst:216
msgid ""
"Fixed bug where MySQL server default comparisons were basically not "
"working at all due to incorrect regexp added in :ticket:`455`.  Also "
"accommodates for MariaDB 10.2 quoting differences in reporting integer "
"based server defaults."
msgstr ""

#: ../changelog.rst:228
msgid ""
"Fixed bug in ``op.drop_constraint()`` for MySQL where quoting rules would"
" not be applied to the constraint name."
msgstr ""

#: ../changelog.rst:239
msgid ""
"Fixed bug where the :meth:`.Script.as_revision_number` method did not "
"accommodate for the 'heads' identifier, which in turn caused the "
":meth:`.EnvironmentContext.get_head_revisions` and "
":meth:`.EnvironmentContext.get_revision_argument` methods to be not "
"usable when multiple heads were present. The "
":meth:.`EnvironmentContext.get_head_revisions` method returns a tuple in "
"all cases as documented."
msgstr ""

#: ../changelog.rst:253
msgid ""
"Fixed bug where autogenerate of :class:`.ExcludeConstraint` would render "
"a raw quoted name for a Column that has case-sensitive characters, which "
"when invoked as an inline member of the Table would produce a stack trace"
" that the quoted name is not found. An incoming Column object is now "
"rendered as ``sa.column('name')``."
msgstr ""

#: ../changelog.rst:263
msgid ""
"Fixed bug where the indexes would not be included in a migration that was"
" dropping the owning table.   The fix now will also emit DROP INDEX for "
"the indexes ahead of time, but more importantly will include CREATE INDEX"
" in the downgrade migration."
msgstr ""

#: ../changelog.rst:273
msgid ""
"Fixed the autogenerate of the module prefix when rendering the text_type "
"parameter of postgresql.HSTORE, in much the same way that we do for "
"ARRAY's type and JSON's text_type."
msgstr ""

#: ../changelog.rst:282
msgid ""
"Added support for DROP CONSTRAINT to the MySQL Alembic dialect to support"
" MariaDB 10.2 which now has real CHECK constraints.  Note this change "
"does **not** add autogenerate support, only support for "
"op.drop_constraint() to work."
msgstr ""

#: ../changelog.rst:296
msgid ""
"Fixed regression caused by :ticket:`421` which would cause case-sensitive"
" quoting rules to interfere with the comparison logic for index names, "
"thus causing indexes to show as added for indexes that have case-"
"sensitive names.   Works with SQLAlchemy 0.9 and later series."
msgstr ""

#: ../changelog.rst:307
msgid ""
"Fixed bug where autogenerate would produce a DROP statement for the index"
" implicitly created by a Postgresql EXCLUDE constraint, rather than "
"skipping it as is the case for indexes implicitly generated by unique "
"constraints. Makes use of SQLAlchemy 1.0.x's improved \"duplicates "
"index\" metadata and requires at least SQLAlchemy version 1.0.x to "
"function correctly."
msgstr ""

#: ../changelog.rst:367
msgid ""
"The ``alembic history`` command will now make use of the revision "
"environment ``env.py`` unconditionally if the ``revision_environment`` "
"configuration flag is set to True.  Previously, the environment would "
"only be invoked if the history specification were against a database-"
"stored revision token."
msgstr ""

#: ../changelog.rst:323
msgid ""
"Fixed a few Python3.6 deprecation warnings by replacing ``StopIteration``"
" with ``return``, as well as using ``getfullargspec()`` instead of "
"``getargspec()`` under Python 3."
msgstr ""

#: ../changelog.rst:331
msgid ""
"An addition to :ticket:`441` fixed in 0.9.5, we forgot to also filter for"
" the ``+`` sign in migration names which also breaks due to the relative "
"migrations feature."
msgstr ""

#: ../changelog.rst:339
msgid ""
"Fixed bug expanding upon the fix for :ticket:`85` which adds the correct "
"module import to the \"inner\" type for an ``ARRAY`` type, the fix now "
"accommodates for the generic ``sqlalchemy.types.ARRAY`` type added in "
"SQLAlchemy 1.1, rendering the inner type correctly regardless of whether "
"or not the Postgresql dialect is present."
msgstr ""

#: ../changelog.rst:350
msgid ""
"Fixed bug where server default comparison of CURRENT_TIMESTAMP would fail"
" on MariaDB 10.2 due to a change in how the function is represented by "
"the database during reflection."
msgstr ""

#: ../changelog.rst:357
msgid ""
"Fixed bug where comparison of ``Numeric`` types would produce a "
"difference if the Python-side ``Numeric`` inadvertently specified a non-"
"None \"scale\" with a \"precision\" of None, even though this ``Numeric``"
" type will pass over the \"scale\" argument when rendering. Pull request "
"courtesy Ivan Mmelnychuk."
msgstr ""

#: ../changelog.rst:377
msgid ""
"The name of the temporary table in batch mode is now generated off of the"
" original table name itself, to avoid conflicts for the unusual case of "
"multiple batch operations running against the same database schema at the"
" same time."
msgstr ""

#: ../changelog.rst:386
msgid ""
"A :class:`.ForeignKeyConstraint` can now render correctly if the "
"``link_to_name`` flag is set, as it will not attempt to resolve the name "
"from a \"key\" in this case.  Additionally, the constraint will render "
"as-is even if the remote column name isn't present on the referenced "
"remote table."
msgstr ""

#: ../changelog.rst:396
msgid ""
"Reworked \"sourceless\" system to be fully capable of handling any "
"combination of: Python2/3x, pep3149 or not, PYTHONOPTIMIZE or not, for "
"locating and loading both env.py files as well as versioning files. This "
"includes: locating files inside of ``__pycache__`` as well as listing out"
" version files that might be only in ``versions/__pycache__``, "
"deduplicating version files that may be in ``versions/__pycache__`` and "
"``versions/`` at the same time, correctly looking for .pyc or .pyo files "
"based on if pep488 is present or not. The latest Python3x deprecation "
"warnings involving importlib are also corrected."
msgstr ""

#: ../changelog.rst:414
msgid ""
"A :class:`.CommandError` is raised if the \"--rev-id\" passed to the "
":func:`.revision` command contains dashes or at-signs, as this interferes"
" with the command notation used to locate revisions."
msgstr ""

#: ../changelog.rst:422
msgid ""
"Added support for the dialect-specific keyword arguments to "
":meth:`.Operations.drop_index`.   This includes support for "
"``postgresql_concurrently`` and others."
msgstr ""

#: ../changelog.rst:429
msgid ""
"Fixed bug in timezone feature introduced in :ticket:`425` when the "
"creation date in a revision file is calculated, to accommodate for "
"timezone names that contain mixed-case characters in their name as "
"opposed to all uppercase.  Pull request courtesy Nils Philippsen."
msgstr ""

#: ../changelog.rst:444
msgid ""
"Added an additional attribute to the new "
":paramref:`.EnvironmentContext.configure.on_version_apply` API, "
":attr:`.MigrationInfo.up_revision_ids`, to accommodate for the uncommon "
"case of the ``alembic stamp`` command being used to move from multiple "
"branches down to a common branchpoint; there will be multiple \"up\" "
"revisions in this one case."
msgstr ""

#: ../changelog.rst:458
msgid ""
"Added a new callback hook "
":paramref:`.EnvironmentContext.configure.on_version_apply`, which allows "
"user-defined code to be invoked each time an individual upgrade, "
"downgrade, or stamp operation proceeds against a database. Pull request "
"courtesy John Passaro."
msgstr ""

#: ../changelog.rst:468
msgid ""
"Fixed bug where autogen comparison of a :class:`.Variant` datatype would "
"not compare to the dialect level type for the \"default\" implementation "
"of the :class:`.Variant`, returning the type as changed between database "
"and table metadata."
msgstr ""

#: ../changelog.rst:477
msgid ""
"Fixed unit tests to run correctly under the SQLAlchemy 1.0.x series prior"
" to version 1.0.10 where a particular bug involving Postgresql exclude "
"constraints was fixed."
msgstr ""

#: ../changelog.rst:497
msgid ""
"Added a new configuration option ``timezone``, a string timezone name "
"that will be applied to the create date timestamp rendered inside the "
"revision file as made availble to the ``file_template`` used to generate "
"the revision filename.  Note this change adds the ``python-dateutil`` "
"package as a dependency."
msgstr ""

#: ../changelog.rst:489
msgid ""
"Repaired :meth:`.Operations.rename_table` for SQL Server when the target "
"table is in a remote schema, the schema name is omitted from the \"new "
"name\" argument."
msgstr ""

#: ../changelog.rst:507
msgid ""
"The autogenerate compare scheme now takes into account the name "
"truncation rules applied by SQLAlchemy's DDL compiler to the names of the"
" :class:`.Index` object, when these names are dynamically truncated due "
"to a too-long identifier name.   As the identifier truncation is "
"deterministic, applying the same rule to the metadata name allows correct"
" comparison to the database-derived name."
msgstr ""

#: ../changelog.rst:518
msgid ""
"A warning is emitted when an object that's not a "
":class:`~sqlalchemy.engine.Connection` is passed to "
":meth:`.EnvironmentContext.configure`.  For the case of a "
":class:`~sqlalchemy.engine.Engine` passed, the check for \"in "
"transaction\" introduced in version 0.9.0 has been relaxed to work in the"
" case of an attribute error, as some users appear to be passing an "
":class:`~sqlalchemy.engine.Engine` and not a "
":class:`~sqlalchemy.engine.Connection`."
msgstr ""

#: ../changelog.rst:535
msgid ""
"An adjustment to the bug fix for :ticket:`369` to accommodate for env.py "
"scripts that use an enclosing transaction distinct from the one that the "
"context provides, so that the check for \"didn't commit the transaction\""
" doesn't trigger in this scenario."
msgstr ""

#: ../changelog.rst:548
msgid ""
"The :paramref:`.EnvironmentContext.configure.target_metadata` parameter "
"may now be optionally specified as a sequence of :class:`.MetaData` "
"objects instead of a single :class:`.MetaData` object.  The autogenerate "
"process will process the sequence of :class:`.MetaData` objects in order."
msgstr ""

#: ../changelog.rst:603
msgid ""
"Added a keyword argument ``process_revision_directives`` to the "
":func:`.command.revision` API call.  This function acts in the same role "
"as the environment-level "
":paramref:`.EnvironmentContext.configure.process_revision_directives`, "
"and allows API use of the command to drop in an ad-hoc directive process "
"function.  This function can be used among other things to place a "
"complete :class:`.MigrationScript` structure in place."
msgstr ""

#: ../changelog.rst:616
msgid ""
"Added support for Postgresql EXCLUDE constraints, including the operation"
" directive :meth:`.Operations.create_exclude_constraints` as well as "
"autogenerate render support for the ``ExcludeConstraint`` object as "
"present in a ``Table``.  Autogenerate detection for an EXCLUDE constraint"
" added or removed to/from an existing table is **not** implemented as the"
" SQLAlchemy Postgresql dialect does not yet support reflection of EXCLUDE"
" constraints."
msgstr ""

#: ../changelog.rst:624
msgid ""
"Additionally, unknown constraint types now warn when encountered within "
"an autogenerate action rather than raise."
msgstr ""

#: ../changelog.rst:558
msgid ""
"A :class:`.CommandError` is now raised when a migration file opens a "
"database transaction and does not close/commit/rollback, when the backend"
" database or environment options also specify transactional_ddl is False."
"   When transactional_ddl is not in use, Alembic doesn't close any "
"transaction so a transaction opened by a migration file will cause the "
"following migrations to fail to apply."
msgstr ""

#: ../changelog.rst:569
msgid ""
"The ``autoincrement=True`` flag is now rendered within the "
":meth:`.Operations.alter_column` operation if the source column indicates"
" that this flag should be set to True.  The behavior is sensitive to the "
"SQLAlchemy version in place, as the \"auto\" default option is new in "
"SQLAlchemy 1.1.  When the source column indicates autoincrement as True "
"or \"auto\", the flag will render as True if the original column "
"contextually indicates that it should have \"autoincrement\" keywords, "
"and when the source column explcitly sets it to False, this is also "
"rendered.  The behavior is intended to preserve the AUTO_INCREMENT flag "
"on MySQL as the column is fully recreated on this backend.  Note that "
"this flag does **not** support alteration of a column's \"autoincrement\""
" status, as this is not portable across backends."
msgstr ""

#: ../changelog.rst:586
msgid ""
"Fixed bug where Postgresql JSON/JSONB types rendered on SQLAlchemy 1.1 "
"would render the \"astext_type\" argument which defaults to the "
"``Text()`` type without the module prefix, similarly to the issue with "
"ARRAY fixed in :ticket:`85`."
msgstr ""

#: ../changelog.rst:595
msgid ""
"Fixed bug where Postgresql ARRAY type would not render the import prefix "
"for the inner type; additionally, user-defined renderers take place for "
"the inner type as well as the outer type.  Pull request courtesy Paul "
"Brackin."
msgstr ""

#: ../changelog.rst:630
msgid ""
"Fixed bug in :func:`.ops.create_foreign_key` where the internal table "
"representation would not be created properly if the foriegn key referred "
"to a table in a different schema of the same name.  Pull request courtesy"
" Konstantin Lebedev."
msgstr ""

#: ../changelog.rst:643
msgid ""
"The alembic_version table, when initially created, now establishes a "
"primary key constraint on the \"version_num\" column, to suit database "
"engines that don't support tables without primary keys.   This behavior "
"can be controlled using the parameter "
":paramref:`.EnvironmentContext.configure.version_table_pk`.  Note that "
"this change only applies to the initial creation of the alembic_version "
"table; it does not impact any existing alembic_version table already "
"present."
msgstr ""

#: ../changelog.rst:656
msgid ""
"Fixed bug where doing ``batch_op.drop_constraint()`` against the primary "
"key constraint would fail to remove the \"primary_key\" flag from the "
"column, resulting in the constraint being recreated."
msgstr ""

#: ../changelog.rst:663
msgid ""
"Adjusted the logic originally added for :ticket:`276` that detects MySQL "
"unique constraints which are actually unique indexes to be generalized "
"for any dialect that has this behavior, for SQLAlchemy version 1.0 and "
"greater.  This is to allow for upcoming SQLAlchemy support for unique "
"constraint reflection for Oracle, which also has no dedicated concept of "
"\"unique constraint\" and instead establishes a unique index."
msgstr ""

#: ../changelog.rst:674
msgid ""
"Added a file ignore for Python files of the form ``.#<name>.py``, which "
"are generated by the Emacs editor.  Pull request courtesy Markus Mattes."
msgstr ""

#: ../changelog.rst:686
msgid ""
"Adjustment to the \"please adjust!\" comment in the script.py.mako "
"template so that the generated comment starts with a single pound sign, "
"appeasing flake8."
msgstr ""

#: ../changelog.rst:694
msgid ""
"Batch mode will not use CAST() to copy data if type_ is given, however "
"the basic type affinity matches that of the existing type.  This to avoid"
" SQLite's CAST of TIMESTAMP which results in truncation of the data, in "
"those cases where the user needs to add redundant type_ for other "
"reasons."
msgstr ""

#: ../changelog.rst:704
msgid ""
"Continued pep8 improvements by adding appropriate whitespace in the base "
"template for generated migrations.  Pull request courtesy Markus Mattes."
msgstr ""

#: ../changelog.rst:711
msgid ""
"Added an additional check when reading in revision files to detect if the"
" same file is being read twice; this can occur if the same directory or a"
" symlink equivalent is present more than once in version_locations. A "
"warning is now emitted and the file is skipped.  Pull request courtesy "
"Jiri Kuncar."
msgstr ""

#: ../changelog.rst:721
msgid ""
"Fixed bug where usage of a custom TypeDecorator which returns a per-"
"dialect type via :meth:`.TypeDecorator.load_dialect_impl` that differs "
"significantly from the default \"impl\" for the type decorator would fail"
" to compare correctly during autogenerate."
msgstr ""

#: ../changelog.rst:730
msgid ""
"Fixed bug in Postgresql \"functional index skip\" behavior where a "
"functional index that ended in ASC/DESC wouldn't be detected as something"
" we can't compare in autogenerate, leading to duplicate definitions in "
"autogenerated files."
msgstr ""

#: ../changelog.rst:738
msgid ""
"Fixed bug where the \"base\" specifier, as in \"base:head\", could not be"
" used explicitly when ``--sql`` mode was present."
msgstr ""

#: ../changelog.rst:756
msgid ""
"Added support for the USING clause to the ALTER COLUMN operation for "
"Postgresql.  Support is via the "
":paramref:`.op.alter_column.postgresql_using` parameter.  Pull request "
"courtesy Frazer McLean."
msgstr ""

#: ../changelog.rst:764
msgid ""
"Autogenerate with type comparison enabled will pick up on the timezone "
"setting changing between DateTime types.   Pull request courtesy David "
"Szotten."
msgstr ""

#: ../changelog.rst:748
msgid ""
"The imports in the default script.py.mako are now at the top so that "
"flake8 editors don't complain by default.  PR courtesy Guilherme Mansur."
msgstr ""

#: ../changelog.rst:776
msgid ""
"Fixed bug where upgrading to the head of a branch which is already "
"present would fail, only if that head were also the dependency of a "
"different branch that is also upgraded, as the revision system would see "
"this as trying to go in the wrong direction.   The check here has been "
"refined to distinguish between same-branch revisions out of order vs. "
"movement along sibling branches."
msgstr ""

#: ../changelog.rst:787
msgid ""
"Adjusted the version traversal on downgrade such that we can downgrade to"
" a version that is a dependency for a version in a different branch, "
"*without* needing to remove that dependent version as well.  Previously, "
"the target version would be seen as a \"merge point\" for it's normal up-"
"revision as well as the dependency.  This integrates with the changes for"
" :ticket:`377` and :ticket:`378` to improve treatment of branches with "
"dependencies overall."
msgstr ""

#: ../changelog.rst:800
msgid ""
"Fixed bug where a downgrade to a version that is also a dependency to a "
"different branch would fail, as the system attempted to treat this as an "
"\"unmerge\" of a merge point, when in fact it doesn't have the other side"
" of the merge point available for update."
msgstr ""

#: ../changelog.rst:809
msgid ""
"Fixed bug where the \"alembic current\" command wouldn't show a revision "
"as a current head if it were also a dependency of a version in a "
"different branch that's also applied.   Extra logic is added to extract "
"\"implied\" versions of different branches from the top-level versions "
"listed in the alembic_version table."
msgstr ""

#: ../changelog.rst:818
msgid ""
"Fixed bug where a repr() or str() of a Script object would fail if the "
"script had multiple dependencies."
msgstr ""

#: ../changelog.rst:824
msgid ""
"Fixed bug in autogen where if the DB connection sends the default schema "
"as \"None\", this \"None\" would be removed from the list of schemas to "
"check if include_schemas were set.  This could possibly impact using "
"include_schemas with SQLite."
msgstr ""

#: ../changelog.rst:832
msgid ""
"Small adjustment made to the batch handling for reflected CHECK "
"constraints to accommodate for SQLAlchemy 1.1 now reflecting these. Batch"
" mode still does not support CHECK constraints from the reflected table "
"as these can't be easily differentiated from the ones created by types "
"such as Boolean."
msgstr ""

#: ../changelog.rst:846
msgid ""
"Errors which occur within the Mako render step are now intercepted and "
"raised as CommandErrors like other failure cases; the Mako exception "
"itself is written using template-line formatting to a temporary file "
"which is named in the exception message."
msgstr ""

#: ../changelog.rst:855
msgid ""
"Added a fix to Postgresql server default comparison which first checks if"
" the text of the default is identical to the original, before attempting "
"to actually run the default.  This accomodates for default-generation "
"functions that generate a new value each time such as a uuid function."
msgstr ""

#: ../changelog.rst:864
msgid ""
"Fixed bug introduced by the fix for :ticket:`338` in version 0.8.4 where "
"a server default could no longer be dropped in batch mode. Pull request "
"courtesy Martin Domke."
msgstr ""

#: ../changelog.rst:871
msgid ""
"Fixed bug where SQL Server arguments for drop_column() would not be "
"propagated when running under a batch block.  Pull request courtesy "
"Michal Petrucha."
msgstr ""

#: ../changelog.rst:883
msgid ""
"Fixed bug where the columns rendered in a ``PrimaryKeyConstraint`` in "
"autogenerate would inappropriately render the \"key\" of the column, not "
"the name.  Pull request courtesy Jesse Dhillon."
msgstr ""

#: ../changelog.rst:891
msgid ""
"Repaired batch migration support for \"schema\" types which generate "
"constraints, in particular the ``Boolean`` datatype which generates a "
"CHECK constraint.  Previously, an alter column operation with this type "
"would fail to correctly accommodate for the CHECK constraint on change "
"both from and to this type.  In the former case the operation would fail "
"entirely, in the latter, the CHECK constraint would not get generated.  "
"Both of these issues are repaired."
msgstr ""

#: ../changelog.rst:903
msgid ""
"Changing a schema type such as ``Boolean`` to a non-schema type would "
"emit a drop constraint operation which emits ``NotImplementedError`` for "
"the MySQL dialect.  This drop constraint operation is now skipped when "
"the constraint originates from a schema type."
msgstr ""

#: ../changelog.rst:915
msgid ""
"A major improvement to the hash id generation function, which for some "
"reason used an awkward arithmetic formula against uuid4() that produced "
"values that tended to start with the digits 1-4.  Replaced with a simple "
"substring approach which provides an even distribution.  Pull request "
"courtesy Antti Haapala."
msgstr ""

#: ../changelog.rst:924
msgid ""
"Added an autogenerate renderer for the :class:`.ExecuteSQLOp` operation "
"object; only renders if given a plain SQL string, otherwise raises "
"NotImplementedError.  Can be of help with custom autogenerate sequences "
"that includes straight SQL execution.  Pull request courtesy Jacob "
"Magnusson."
msgstr ""

#: ../changelog.rst:934
msgid ""
"Batch mode generates a FOREIGN KEY constraint that is self-referential "
"using the ultimate table name, rather than ``_alembic_batch_temp``. When "
"the table is renamed from ``_alembic_batch_temp`` back to the original "
"name, the FK now points to the right name.  This will **not** work if "
"referential integrity is being enforced (eg. SQLite \"PRAGMA "
"FOREIGN_KEYS=ON\") since the original table is dropped and the new table "
"then renamed to that name, however this is now consistent with how "
"foreign key constraints on **other** tables already operate with batch "
"mode; these don't support batch mode if referential integrity is enabled "
"in any case."
msgstr ""

#: ../changelog.rst:949
msgid ""
"Added a type-level comparator that distinguishes :class:`.Integer`, "
":class:`.BigInteger`, and :class:`.SmallInteger` types and dialect-"
"specific types; these all have \"Integer\" affinity so previously all "
"compared as the same."
msgstr ""

#: ../changelog.rst:958
msgid ""
"Fixed bug where the ``server_default`` parameter of ``alter_column()`` "
"would not function correctly in batch mode."
msgstr ""

#: ../changelog.rst:965
msgid ""
"Adjusted the rendering for index expressions such that a :class:`.Column`"
" object present in the source :class:`.Index` will not be rendered as "
"table-qualified; e.g. the column name will be rendered alone. Table-"
"qualified names here were failing on systems such as Postgresql."
msgstr ""

#: ../changelog.rst:978
msgid ""
"Fixed an 0.8 regression whereby the \"imports\" dictionary member of the "
"autogen context was removed; this collection is documented in the "
"\"render custom type\" documentation as a place to add new imports. The "
"member is now known as :attr:`.AutogenContext.imports` and the "
"documentation is repaired."
msgstr ""

#: ../changelog.rst:988
msgid ""
"Fixed bug in batch mode where a table that had pre-existing indexes would"
" create the same index on the new table with the same name, which on "
"SQLite produces a naming conflict as index names are in a global "
"namespace on that backend.   Batch mode now defers the production of both"
" existing and new indexes until after the entire table transfer operation"
" is complete, which also means those indexes no longer take effect during"
" the INSERT from SELECT section as well; the indexes are applied in a "
"single step afterwards."
msgstr ""

#: ../changelog.rst:1000
msgid ""
"Added \"pytest-xdist\" as a tox dependency, so that the -n flag in the "
"test command works if this is not already installed. Pull request "
"courtesy Julien Danjou."
msgstr ""

#: ../changelog.rst:1008
msgid ""
"Fixed issue in PG server default comparison where model-side defaults "
"configured with Python unicode literals would leak the \"u\" character "
"from a ``repr()`` into the SQL used for comparison, creating an invalid "
"SQL expression, as the server-side comparison feature in PG currently "
"repurposes the autogenerate Python rendering feature to get a quoted "
"version of a plain string default."
msgstr ""

#: ../changelog.rst:1024
msgid ""
"Added workaround in new foreign key option detection feature for MySQL's "
"consideration of the \"RESTRICT\" option being the default, for which no "
"value is reported from the database; the MySQL impl now corrects for when"
" the model reports RESTRICT but the database reports nothing.   A similar"
" rule is in the default FK comparison to accommodate for the default \"NO"
" ACTION\" setting being present in the model but not necessarily reported"
" by the database, or vice versa."
msgstr ""

#: ../changelog.rst:1039
msgid ""
"A custom "
":paramref:`.EnvironmentContext.configure.process_revision_directives` "
"hook can now generate op directives within the :class:`.UpgradeOps` and "
":class:`.DowngradeOps` containers that will be generated as Python code "
"even when the ``--autogenerate`` flag is False; provided that "
"``revision_environment=True``, the full render operation will be run even"
" in \"offline\" mode."
msgstr ""

#: ../changelog.rst:1081
msgid ""
"Implemented support for autogenerate detection of changes in the "
"``ondelete``, ``onupdate``, ``initially`` and ``deferrable`` attributes "
"of :class:`.ForeignKeyConstraint` objects on SQLAlchemy backends that "
"support these on reflection (as of SQLAlchemy 1.0.8 currently Postgresql "
"for all four, MySQL for ``ondelete`` and  ``onupdate`` only).   A "
"constraint object that modifies these values will be reported as a "
"\"diff\" and come out as a drop/create of the constraint with the "
"modified values. The fields are ignored for backends which don't reflect "
"these attributes (as of SQLA 1.0.8 this includes SQLite, Oracle, SQL "
"Server, others)."
msgstr ""

#: ../changelog.rst:1049
msgid ""
"Repaired the render operation for the :class:`.ops.AlterColumnOp` object "
"to succeed when the \"existing_type\" field was not present."
msgstr ""

#: ../changelog.rst:1056
msgid ""
"Fixed a regression 0.8 whereby the \"multidb\" environment template "
"failed to produce independent migration script segments for the output "
"template.  This was due to the reorganization of the script rendering "
"system for 0.8.  To accommodate this change, the "
":class:`.MigrationScript` structure will in the case of multiple calls to"
" :meth:`.MigrationContext.run_migrations` produce lists for the "
":attr:`.MigrationScript.upgrade_ops` and "
":attr:`.MigrationScript.downgrade_ops` attributes; each "
":class:`.UpgradeOps` and :class:`.DowngradeOps` instance keeps track of "
"its own ``upgrade_token`` and ``downgrade_token``, and each are rendered "
"individually."
msgstr ""

#: ../changelog.rst:1070
msgid ""
":ref:`autogen_customizing_multiengine_revision` - additional detail on "
"the workings of the "
":paramref:`.EnvironmentContext.configure.process_revision_directives` "
"parameter when multiple calls to :meth:`.MigrationContext.run_migrations`"
" are made."
msgstr ""

#: ../changelog.rst:1108
msgid ""
"Added new command ``alembic edit``.  This command takes the same "
"arguments as ``alembic show``, however runs the target script file within"
" $EDITOR.  Makes use of the ``python-editor`` library in order to "
"facilitate the handling of $EDITOR with reasonable default behaviors "
"across platforms.  Pull request courtesy Michel Albert."
msgstr ""

#: ../changelog.rst:1119
msgid ""
"Added new multiple-capable argument ``--depends-on`` to the ``alembic "
"revision`` command, allowing ``depends_on`` to be established at the "
"command line level rather than having to edit the file after the fact. "
"``depends_on`` identifiers may also be specified as branch names at the "
"command line or directly within the migration file. The values may be "
"specified as partial revision numbers from the command line which will be"
" resolved to full revision numbers in the output file."
msgstr ""

#: ../changelog.rst:1182
msgid ""
"The default test runner via \"python setup.py test\" is now py.test. nose"
" still works via run_tests.py."
msgstr ""

#: ../changelog.rst:1189
msgid ""
"The internal system for Alembic operations has been reworked to now build"
" upon an extensible system of operation objects.  New operations can be "
"added to the ``op.`` namespace, including that they are available in "
"custom autogenerate schemes."
msgstr ""

#: ../changelog.rst:1196
msgid ":ref:`operation_plugins`"
msgstr ""

#: ../changelog.rst:1202
msgid ""
"The internal system for autogenerate been reworked to build upon the "
"extensible system of operation objects present in :ticket:`302`.  As part"
" of this change, autogenerate now produces a full object graph "
"representing a list of migration scripts to be written as well as "
"operation objects that will render all the Python code within them; a new"
" hook "
":paramref:`.EnvironmentContext.configure.process_revision_directives` "
"allows end-user code to fully customize what autogenerate will do, "
"including not just full manipulation of the Python steps to take but also"
" what file or files will be written and where.  Additionally, "
"autogenerate is now extensible as far as database objects compared and "
"rendered into scripts; any new operation directive can also be registered"
" into a series of hooks that allow custom database/model comparison "
"functions to run as well as to render new operation directives into "
"autogenerate scripts."
msgstr ""

#: ../changelog.rst:1220
msgid ":ref:`alembic.autogenerate.toplevel`"
msgstr ""

#: ../changelog.rst:1101
msgid ""
"Fixed bug in batch mode where the ``batch_op.create_foreign_key()`` "
"directive would be incorrectly rendered with the source table and schema "
"names in the argument list."
msgstr ""

#: ../changelog.rst:1226
msgid ""
"Fixed bug where in the erroneous case that alembic_version contains "
"duplicate revisions, some commands would fail to process the version "
"history correctly and end up with a KeyError.   The fix allows the "
"versioning logic to proceed, however a clear error is emitted later when "
"attempting to update the alembic_version table."
msgstr ""

#: ../changelog.rst:1131
msgid ""
"A range of positional argument names have been changed to be clearer and "
"more consistent across methods within the :class:`.Operations` namespace."
"   The most prevalent form of name change is that the descriptive names "
"``constraint_name`` and ``table_name`` are now used where previously the "
"name ``name`` would be used. This is in support of the newly modularized "
"and extensible system of operation objects in "
":mod:`alembic.operations.ops`. An argument translation layer is in place "
"across the ``alembic.op`` namespace that will ensure that named argument "
"calling styles that use the old names will continue to function by "
"transparently translating to the new names, also emitting a warning.   "
"This, along with the fact that these arguments are positional in any case"
" and aren't normally passed with an explicit name, should ensure that the"
" overwhelming majority of applications should be unaffected by this "
"change.   The *only* applications that are impacted are those that:"
msgstr ""

#: ../changelog.rst:1148
msgid ""
"use the :class:`.Operations` object directly in some way, rather than "
"calling upon the ``alembic.op`` namespace, and"
msgstr ""

#: ../changelog.rst:1151
msgid ""
"invoke the methods on :class:`.Operations` using named keyword arguments "
"for positional arguments like ``table_name``, ``constraint_name``, etc., "
"which commonly were named ``name`` as of 0.7.6."
msgstr ""

#: ../changelog.rst:1156
msgid ""
"any application that is using named keyword arguments in place of "
"positional argument for the recently added :class:`.BatchOperations` "
"object may also be affected."
msgstr ""

#: ../changelog.rst:1160
msgid "The naming changes are documented as \"versionchanged\" for 0.8.0:"
msgstr ""

#: ../changelog.rst:1162
msgid ":meth:`.BatchOperations.create_check_constraint`"
msgstr ""

#: ../changelog.rst:1163
msgid ":meth:`.BatchOperations.create_foreign_key`"
msgstr ""

#: ../changelog.rst:1164
msgid ":meth:`.BatchOperations.create_index`"
msgstr ""

#: ../changelog.rst:1165
msgid ":meth:`.BatchOperations.create_unique_constraint`"
msgstr ""

#: ../changelog.rst:1166
msgid ":meth:`.BatchOperations.drop_constraint`"
msgstr ""

#: ../changelog.rst:1167
msgid ":meth:`.BatchOperations.drop_index`"
msgstr ""

#: ../changelog.rst:1168
msgid ":meth:`.Operations.create_check_constraint`"
msgstr ""

#: ../changelog.rst:1169
msgid ":meth:`.Operations.create_foreign_key`"
msgstr ""

#: ../changelog.rst:1170
msgid ":meth:`.Operations.create_primary_key`"
msgstr ""

#: ../changelog.rst:1171
msgid ":meth:`.Operations.create_index`"
msgstr ""

#: ../changelog.rst:1172
msgid ":meth:`.Operations.create_table`"
msgstr ""

#: ../changelog.rst:1173
msgid ":meth:`.Operations.create_unique_constraint`"
msgstr ""

#: ../changelog.rst:1174
msgid ":meth:`.Operations.drop_constraint`"
msgstr ""

#: ../changelog.rst:1175
msgid ":meth:`.Operations.drop_index`"
msgstr ""

#: ../changelog.rst:1176
msgid ":meth:`.Operations.drop_table`"
msgstr ""

#: ../changelog.rst:1249
msgid ""
"Implemented support for :meth:`.BatchOperations.create_primary_key` and "
":meth:`.BatchOperations.create_check_constraint`. Additionally, table "
"keyword arguments are copied from the original reflected table, such as "
"the \"mysql_engine\" keyword argument."
msgstr ""

#: ../changelog.rst:1240
msgid ""
"Fixed critical issue where a complex series of branches/merges would bog "
"down the iteration algorithm working over redundant nodes for millions of"
" cycles.   An internal adjustment has been made so that duplicate nodes "
"are skipped within this iteration."
msgstr ""

#: ../changelog.rst:1258
msgid ""
"The :meth:`.MigrationContext.stamp` method, added as part of the "
"versioning refactor in 0.7 as a more granular version of "
":func:`.command.stamp`, now includes the \"create the alembic_version "
"table if not present\" step in the same way as the command version, which"
" was previously omitted."
msgstr ""

#: ../changelog.rst:1268
msgid ""
"Fixed bug where foreign key options including \"onupdate\", \"ondelete\" "
"would not render within the ``op.create_foreign_key()`` directive, even "
"though they render within a full ``ForeignKeyConstraint`` directive."
msgstr ""

#: ../changelog.rst:1276
msgid ""
"Repaired warnings that occur when running unit tests against SQLAlchemy "
"1.0.5 or greater involving the \"legacy_schema_aliasing\" flag."
msgstr ""

#: ../changelog.rst:1288
msgid ""
"Fixed bug where the case of multiple mergepoints that all have the "
"identical set of ancestor revisions would fail to be upgradable, "
"producing an assertion failure.   Merge points were previously assumed to"
" always require at least an UPDATE in alembic_revision from one of the "
"previous revs to the new one, however in this case, if one of the "
"mergepoints has already been reached, the remaining mergepoints have no "
"row to UPDATE therefore they must do an INSERT of their target version."
msgstr ""

#: ../changelog.rst:1301
msgid ""
"Added support for type comparison functions to be not just per "
"environment, but also present on the custom types themselves, by "
"supplying a method ``compare_against_backend``. Added a new documentation"
" section :ref:`compare_types` describing type comparison fully."
msgstr ""

#: ../changelog.rst:1311
msgid ""
"Added a new option "
":paramref:`.EnvironmentContext.configure.literal_binds`, which will pass "
"the ``literal_binds`` flag into the compilation of SQL constructs when "
"using \"offline\" mode.  This has the effect that SQL objects like "
"inserts, updates, deletes as well as textual statements sent using "
"``text()`` will be compiled such that the dialect will attempt to render "
"literal values \"inline\" automatically. Only a subset of types is "
"typically supported; the :meth:`.Operations.inline_literal` construct "
"remains as the construct used to force a specific literal representation "
"of a value. The :paramref:`.EnvironmentContext.configure.literal_binds` "
"flag is added to the \"offline\" section of the ``env.py`` files "
"generated in new environments."
msgstr ""

#: ../changelog.rst:1329
msgid ""
"Fully implemented the "
":paramref:`~.Operations.batch_alter_table.copy_from` parameter for batch "
"mode, which previously was not functioning.  This allows \"batch mode\" "
"to be usable in conjunction with ``--sql``."
msgstr ""

#: ../changelog.rst:1338
msgid ""
"Repaired support for the :meth:`.BatchOperations.create_index` directive,"
" which was mis-named internally such that the operation within a batch "
"context could not proceed.   The create index operation will proceed as "
"part of a larger \"batch table recreate\" operation only if "
":paramref:`~.Operations.batch_alter_table.recreate` is set to \"always\","
" or if the batch operation includes other instructions that require a "
"table recreate."
msgstr ""

#: ../changelog.rst:1414
msgid ""
"Added a new feature :attr:`.Config.attributes`, to help with the use case"
" of sharing state such as engines and connections on the outside with a "
"series of Alembic API calls; also added a new cookbook section to "
"describe this simple but pretty important use case."
msgstr ""

#: ../changelog.rst:1421
msgid ":ref:`connection_sharing`"
msgstr ""

#: ../changelog.rst:1426
msgid ""
"The format of the default ``env.py`` script has been refined a bit; it "
"now uses context managers not only for the scope of the transaction, but "
"also for connectivity from the starting engine.  The engine is also now "
"called a \"connectable\" in support of the use case of an external "
"connection being passed in."
msgstr ""

#: ../changelog.rst:1436
msgid ""
"Added support for \"alembic stamp\" to work when given \"heads\" as an "
"argument, when multiple heads are present."
msgstr ""

#: ../changelog.rst:1356
msgid ""
"The ``--autogenerate`` option is not valid when used in conjunction with "
"\"offline\" mode, e.g. ``--sql``.  This now raises a ``CommandError``, "
"rather than failing more deeply later on.  Pull request courtesy Johannes"
" Erdfelt."
msgstr ""

#: ../changelog.rst:1365
msgid ""
"Fixed bug where the mssql DROP COLUMN directive failed to include "
"modifiers such as \"schema\" when emitting the DDL."
msgstr ""

#: ../changelog.rst:1372
msgid ""
"Postgresql \"functional\" indexes are necessarily skipped from the "
"autogenerate process, as the SQLAlchemy backend currently does not "
"support reflection of these structures.   A warning is emitted both from "
"the SQLAlchemy backend as well as from the Alembic backend for Postgresql"
" when such an index is detected."
msgstr ""

#: ../changelog.rst:1382
msgid ""
"Fixed bug where MySQL backend would report dropped unique indexes and/or "
"constraints as both at the same time.  This is because MySQL doesn't "
"actually have a \"unique constraint\" construct that reports differently "
"than a \"unique index\", so it is present in both lists.  The net effect "
"though is that the MySQL backend will report a dropped unique "
"index/constraint as an index in cases where the object was first created "
"as a unique constraint, if no other information is available to make the "
"decision.  This differs from other backends like Postgresql which can "
"report on unique constraints and unique indexes separately."
msgstr ""

#: ../changelog.rst:1397
msgid ""
"Fixed bug where using a partial revision identifier as the \"starting "
"revision\" in ``--sql`` mode in a downgrade operation would fail to "
"resolve properly."
msgstr ""

#: ../changelog.rst:1401
msgid ""
"As a side effect of this change, the "
":meth:`.EnvironmentContext.get_starting_revision_argument` method will "
"return the \"starting\" revision in its originally- given \"partial\" "
"form in all cases, whereas previously when running within the "
":meth:`.command.stamp` command, it would have been resolved to a full "
"number before passing it to the :class:`.EnvironmentContext`.  The "
"resolution of this value to a real revision number has basically been "
"moved to a more fundamental level within the offline migration process."
msgstr ""

#: ../changelog.rst:1447
msgid ""
"Repaired issue where a server default specified without ``text()`` that "
"represented a numeric or floating point (e.g. with decimal places) value "
"would fail in the Postgresql-specific check for \"compare server "
"default\"; as PG accepts the value with quotes in the table "
"specification, it's still valid.  Pull request courtesy Dimitris "
"Theodorou."
msgstr ""

#: ../changelog.rst:1457
msgid ""
"The rendering of a :class:`~sqlalchemy.schema.ForeignKeyConstraint` will "
"now ensure that the names of the source and target columns are the "
"database-side name of each column, and not the value of the ``.key`` "
"attribute as may be set only on the Python side. This is because Alembic "
"generates the DDL for constraints as standalone objects without the need "
"to actually refer to an in-Python :class:`~sqlalchemy.schema.Table` "
"object, so there's no step that would resolve these Python-only key names"
" to database column names."
msgstr ""

#: ../changelog.rst:1470
msgid ""
"Fixed bug in foreign key autogenerate where if the in-Python table used "
"custom column keys (e.g. using the ``key='foo'`` kwarg to ``Column``), "
"the comparison of existing foreign keys to those specified in the "
"metadata would fail, as the reflected table would not have these keys "
"available which to match up.  Foreign key comparison for autogenerate now"
" ensures it's looking at the database-side names of the columns in all "
"cases; this matches the same functionality within unique constraints and "
"indexes."
msgstr ""

#: ../changelog.rst:1483
msgid ""
"Fixed issue in autogenerate type rendering where types that belong to "
"modules that have the name \"sqlalchemy\" in them would be mistaken as "
"being part of the ``sqlalchemy.`` namespace.  Pull req courtesy Bartosz "
"Burclaf."
msgstr ""

#: ../changelog.rst:1496
msgid ""
"Fixed regression in new versioning system where upgrade / history "
"operation would fail on AttributeError if no version files were present "
"at all."
msgstr ""

#: ../changelog.rst:1507
msgid ""
"Adjusted the SQLite backend regarding autogen of unique constraints to "
"work fully with the current SQLAlchemy 1.0, which now will report on "
"UNIQUE constraints that have no name."
msgstr ""

#: ../changelog.rst:1515
msgid ""
"Fixed bug in batch where if the target table contained multiple foreign "
"keys to the same target table, the batch mechanics would fail with a "
"\"table already exists\" error.  Thanks for the help on this from Lucas "
"Kahlert."
msgstr ""

#: ../changelog.rst:1524
msgid ""
"Fixed an issue where the MySQL routine to skip foreign-key-implicit "
"indexes would also catch unnamed unique indexes, as they would be named "
"after the column and look like the FK indexes.  Pull request courtesy "
"Johannes Erdfelt."
msgstr ""

#: ../changelog.rst:1533
msgid ""
"Repaired a regression in both the MSSQL and Oracle dialects whereby the "
"overridden ``_exec()`` method failed to return a value, as is needed now "
"in the 0.7 series."
msgstr ""

#: ../changelog.rst:1552
msgid ""
"Support for autogenerate of FOREIGN KEY constraints has been added. These"
" are delivered within the autogenerate process in the same manner as "
"UNIQUE constraints, including ``include_object`` support. Big thanks to "
"Ann Kamyshnikova for doing the heavy lifting here."
msgstr ""

#: ../changelog.rst:1560
msgid ""
"Added :paramref:`~.Operations.batch_alter_table.naming_convention` "
"argument to :meth:`.Operations.batch_alter_table`, as this is necessary "
"in order to drop foreign key constraints; these are often unnamed on the "
"target database, and in the case that they are named, SQLAlchemy is as of"
" the 0.9 series not including these names yet."
msgstr ""

#: ../changelog.rst:1568
msgid ":ref:`dropping_sqlite_foreign_keys`"
msgstr ""

#: ../changelog.rst:1590
msgid ""
"Added two new arguments "
":paramref:`.Operations.batch_alter_table.reflect_args` and "
":paramref:`.Operations.batch_alter_table.reflect_kwargs`, so that "
"arguments may be passed directly to suit the "
":class:`~.sqlalchemy.schema.Table` object that will be reflected."
msgstr ""

#: ../changelog.rst:1599
msgid ":ref:`batch_controlling_table_reflection`"
msgstr ""

#: ../changelog.rst:1544
msgid ""
"The ``render_as_batch`` flag was inadvertently hardcoded to ``True``, so "
"all autogenerates were spitting out batch mode...this has been fixed so "
"that batch mode again is only when selected in env.py."
msgstr ""

#: ../changelog.rst:1573
msgid ""
"Fixed bug where the \"source_schema\" argument was not correctly passed "
"when calling :meth:`.BatchOperations.create_foreign_key`.  Pull request "
"courtesy Malte Marquarding."
msgstr ""

#: ../changelog.rst:1581
msgid ""
"Repaired the inspection, copying and rendering of CHECK constraints and "
"so-called \"schema\" types such as Boolean, Enum within the batch copy "
"system; the CHECK constraint will not be \"doubled\" when the table is "
"copied, and additionally the inspection of the CHECK constraint for its "
"member columns will no longer fail with an attribute error."
msgstr ""

#: ../changelog.rst:1728
msgid ""
"The ``--head_only`` option to the ``alembic current`` command is "
"deprecated; the ``current`` command now lists just the version numbers "
"alone by default; use ``--verbose`` to get at additional output."
msgstr ""

#: ../changelog.rst:1837
msgid ""
"The default value of the "
":paramref:`.EnvironmentContext.configure.user_module_prefix` parameter is"
" **no longer the same as the SQLAlchemy prefix**. When omitted, user-"
"defined types will now use the ``__module__`` attribute of the type class"
" itself when rendering in an autogenerated module."
msgstr ""

#: ../changelog.rst:1913
msgid ""
"Minimum SQLAlchemy version is now 0.7.6, however at least 0.8.4 is "
"strongly recommended.  The overhaul of the test suite allows for fully "
"passing tests on all SQLAlchemy versions from 0.7.6 on forward."
msgstr ""

#: ../changelog.rst:1609
msgid ""
"The \"multiple heads / branches\" feature has now landed.  This is by far"
" the most significant change Alembic has seen since its inception; while "
"the workflow of most commands hasn't changed, and the format of version "
"files and the ``alembic_version`` table are unchanged as well, a new "
"suite of features opens up in the case where multiple version files refer"
" to the same parent, or to the \"base\".  Merging of branches, operating "
"across distinct named heads, and multiple independent bases are now all "
"supported.   The feature incurs radical changes to the internals of "
"versioning and traversal, and should be treated as \"beta mode\" for the "
"next several subsequent releases within 0.7."
msgstr ""

#: ../changelog.rst:1623
msgid ":ref:`branches`"
msgstr ""

#: ../changelog.rst:1629
msgid ""
"In conjunction with support for multiple independent bases, the specific "
"version directories are now also configurable to include multiple, user-"
"defined directories.   When multiple directories exist, the creation of a"
" revision file with no down revision requires that the starting directory"
" is indicated; the creation of subsequent revisions along that lineage "
"will then automatically use that directory for new files."
msgstr ""

#: ../changelog.rst:1639
msgid ":ref:`multiple_version_directories`"
msgstr ""

#: ../changelog.rst:1645
msgid ""
"Added \"move and copy\" workflow, where a table to be altered is copied "
"to a new one with the new structure and the old one dropped, is now "
"implemented for SQLite as well as all database backends in general using "
"the new :meth:`.Operations.batch_alter_table` system.   This directive "
"provides a table-specific operations context which gathers column- and "
"constraint-level mutations specific to that table, and at the end of the "
"context creates a new table combining the structure of the old one with "
"the given changes, copies data from old table to new, and finally drops "
"the old table, renaming the new one to the existing name.  This is "
"required for fully featured SQLite migrations, as SQLite has very little "
"support for the traditional ALTER directive.   The batch directive is "
"intended to produce code that is still compatible with other databases, "
"in that the \"move and copy\" process only occurs for SQLite by default, "
"while still providing some level of sanity to SQLite's requirement by "
"allowing multiple table mutation operations to proceed within one \"move "
"and copy\" as well as providing explicit control over when this operation"
" actually occurs.  The \"move and copy\" feature may be optionally "
"applied to other backends as well, however dealing with referential "
"integrity constraints from other tables must still be handled explicitly."
msgstr ""

#: ../changelog.rst:1669
msgid ":ref:`batch_migrations`"
msgstr ""

#: ../changelog.rst:1674
msgid ""
"Relative revision identifiers as used with ``alembic upgrade``, ``alembic"
" downgrade`` and ``alembic history`` can be combined with specific "
"revisions as well, e.g. ``alembic upgrade ae10+3``, to produce a "
"migration target relative to the given exact version."
msgstr ""

#: ../changelog.rst:1714
msgid ""
"New commands added: ``alembic show``, ``alembic heads`` and ``alembic "
"merge``.  Also, a new option ``--verbose`` has been added to  several "
"informational commands, such as ``alembic history``, ``alembic current``,"
" ``alembic branches``, and ``alembic heads``. ``alembic revision`` also "
"contains several new options used within the new branch management "
"system.    The output of commands has been altered in many cases to "
"support new fields and attributes; the ``history`` command in particular "
"now returns it's \"verbose\" output only if ``--verbose`` is sent; "
"without this flag it reverts to it's older behavior of short line items "
"(which was never changed in the docs)."
msgstr ""

#: ../changelog.rst:1735
msgid ""
"Added new argument :paramref:`.Config.config_args`, allows a dictionary "
"of replacement variables to be passed which will serve as substitution "
"values when an API-produced :class:`.Config` consumes the ``.ini`` file."
"  Pull request courtesy Noufal Ibrahim."
msgstr ""

#: ../changelog.rst:1773
msgid ""
"The :class:`~sqlalchemy.schema.Table` object is now returned when the "
":meth:`.Operations.create_table` method is used.  This ``Table`` is "
"suitable for use in subsequent SQL operations, in particular the "
":meth:`.Operations.bulk_insert` operation."
msgstr ""

#: ../changelog.rst:1782
msgid ""
"Indexes and unique constraints are now included in the "
":paramref:`.EnvironmentContext.configure.include_object` hook. Indexes "
"are sent with type ``\"index\"`` and unique constraints with type "
"``\"unique_constraint\"``."
msgstr ""

#: ../changelog.rst:1905
msgid ""
"SQLAlchemy's testing infrastructure is now used to run tests. This system"
" supports both nose and pytest and opens the way for Alembic testing to "
"support any number of backends, parallel testing, and 3rd party dialect "
"testing."
msgstr ""

#: ../changelog.rst:1683
msgid ""
"The ``alembic revision`` command accepts the ``--sql`` option to suit "
"some very obscure use case where the ``revision_environment`` flag is set"
" up, so that ``env.py`` is run when ``alembic revision`` is run even "
"though autogenerate isn't specified.   As this flag is otherwise "
"confusing, error messages are now raised if ``alembic revision`` is "
"invoked with both ``--sql`` and ``--autogenerate`` or with ``--sql`` "
"without ``revision_environment`` being set."
msgstr ""

#: ../changelog.rst:1696
msgid ""
"Added a rule for Postgresql to not render a \"drop unique\" and \"drop "
"index\" given the same name; for now it is assumed that the \"index\" is "
"the implicit one Postgreql generates.   Future integration with new "
"SQLAlchemy 1.0 features will improve this to be more resilient."
msgstr ""

#: ../changelog.rst:1706
msgid ""
"A change in the ordering when columns and constraints are dropped; "
"autogenerate will now place the \"drop constraint\" calls *before* the "
"\"drop column\" calls, so that columns involved in those constraints "
"still exist when the constraint is dropped."
msgstr ""

#: ../changelog.rst:1744
msgid ""
"The Oracle dialect sets \"transactional DDL\" to False by default, as "
"Oracle does not support transactional DDL."
msgstr ""

#: ../changelog.rst:1751
msgid ""
"Fixed a variety of issues surrounding rendering of Python code that "
"contains unicode literals.  The first is that the \"quoted_name\" "
"construct that SQLAlchemy uses to represent table and column names as "
"well as schema names does not ``repr()`` correctly on Py2K when the value"
" contains unicode characters; therefore an explicit stringification is "
"added to these.  Additionally, SQL expressions such as server defaults "
"were not being generated in a unicode-safe fashion leading to decode "
"errors if server defaults contained non-ascii characters."
msgstr ""

#: ../changelog.rst:1764
msgid ""
"The :meth:`.Operations.add_column` directive will now additionally emit "
"the appropriate ``CREATE INDEX`` statement if the "
":class:`~sqlalchemy.schema.Column` object specifies ``index=True``. Pull "
"request courtesy David Szotten."
msgstr ""

#: ../changelog.rst:1791
msgid ""
"Bound parameters are now resolved as \"literal\" values within the SQL "
"expression inside of a CheckConstraint(), when rendering the SQL as a "
"text string; supported for SQLAlchemy 0.8.0 and forward."
msgstr ""

#: ../changelog.rst:1799
msgid ""
"Added a workaround for SQLAlchemy issue #3023 (fixed in 0.9.5) where a "
"column that's part of an explicit PrimaryKeyConstraint would not have its"
" \"nullable\" flag set to False, thus producing a false autogenerate.  "
"Also added a related correction to MySQL which will correct for MySQL's "
"implicit server default of '0' when a NULL integer column is turned into "
"a primary key column."
msgstr ""

#: ../changelog.rst:1810
msgid ""
"Repaired issue related to the fix for #208 and others; a composite "
"foreign key reported by MySQL would cause a KeyError as Alembic attempted"
" to remove MySQL's implicitly generated indexes from the autogenerate "
"list."
msgstr ""

#: ../changelog.rst:1819
msgid ""
"If the \"alembic_version\" table is present in the target metadata, "
"autogenerate will skip this also.  Pull request courtesy Dj Gilcrease."
msgstr ""

#: ../changelog.rst:1827
msgid ""
"The :paramref:`.EnvironmentContext.configure.version_table` and "
":paramref:`.EnvironmentContext.configure.version_table_schema` arguments "
"are now honored during the autogenerate process, such that these names "
"will be used as the \"skip\" names on both the database reflection and "
"target metadata sides."
msgstr ""

#: ../changelog.rst:1848
msgid ""
"Revision files are now written out using the ``'wb'`` modifier to "
"``open()``, since Mako reads the templates with ``'rb'``, thus preventing"
" CRs from being doubled up as has been observed on windows.  The encoding"
" of the output now defaults to 'utf-8', which can be configured using a "
"newly added config file parameter ``output_encoding``."
msgstr ""

#: ../changelog.rst:1858
msgid ""
"Added support for use of the "
":class:`~sqlalchemy.sql.elements.quoted_name` construct when using the "
"``schema`` argument within operations.  This allows a name containing a "
"dot to be fully quoted, as well as to provide configurable quoting on a "
"per-name basis."
msgstr ""

#: ../changelog.rst:1867
msgid ""
"Added a routine by which the Postgresql Alembic dialect inspects the "
"server default of INTEGER/BIGINT columns as they are reflected during "
"autogenerate for the pattern ``nextval(<name>...)`` containing a "
"potential sequence name, then queries ``pg_catalog`` to see if this "
"sequence is \"owned\" by the column being reflected; if so, it assumes "
"this is a SERIAL or BIGSERIAL column and the server default is omitted "
"from the column reflection as well as any kind of server_default "
"comparison or rendering, along with an INFO message in the logs "
"indicating this has taken place. This allows SERIAL/BIGSERIAL columns to "
"keep the SEQUENCE from being unnecessarily present within the "
"autogenerate operation."
msgstr ""

#: ../changelog.rst:1883
msgid ""
"The system by which autogenerate renders expressions within a "
":class:`~sqlalchemy.schema.Index`, the ``server_default`` of "
":class:`~sqlalchemy.schema.Column`, and the ``existing_server_default`` "
"of :meth:`.Operations.alter_column` has been overhauled to anticipate "
"arbitrary SQLAlchemy SQL constructs, such as ``func.somefunction()``, "
"``cast()``, ``desc()``, and others.   The system does not, as might be "
"preferred, render the full-blown Python expression as originally created "
"within the application's source code, as this would be exceedingly "
"complex and difficult.  Instead, it renders the SQL expression against "
"the target backend that's subject to the autogenerate, and then renders "
"that SQL inside of a :func:`~sqlalchemy.sql.expression.text` construct as"
" a literal SQL string.  This approach still has the downside that the "
"rendered SQL construct may not be backend-agnostic in all cases, so there"
" is still a need for manual intervention in that small number of cases, "
"but overall the majority of cases should work correctly now.  Big thanks "
"to Carlos Rivera for pull requests and support on this."
msgstr ""

#: ../changelog.rst:1921
msgid ""
"The \"match\" keyword is not sent to :class:`.ForeignKeyConstraint` by "
":meth:`.Operations.create_foreign_key` when SQLAlchemy 0.7 is in use; "
"this keyword was added to SQLAlchemy as of 0.8.0."
msgstr ""

#: ../changelog.rst:1940
msgid ""
"Added support for functional indexes when using the "
":meth:`.Operations.create_index` directive.   Within the list of columns,"
" the SQLAlchemy ``text()`` construct can be sent, embedding a literal SQL"
" expression; the :meth:`.Operations.create_index` will perform some "
"hackery behind the scenes to get the :class:`.Index` construct to "
"cooperate. This works around some current limitations in :class:`.Index` "
"which should be resolved on the SQLAlchemy side at some point."
msgstr ""

#: ../changelog.rst:1932
msgid ""
"Fixed bug in MSSQL dialect where \"rename table\" wasn't using "
"``sp_rename()`` as is required on SQL Server.  Pull request courtesy "
"Łukasz Bołdys."
msgstr ""

#: ../changelog.rst:2014
msgid ""
"Added a new accessor :attr:`.MigrationContext.config`, when used in "
"conjunction with a :class:`.EnvironmentContext` and :class:`.Config`, "
"this config will be returned.  Patch courtesy Marc Abramowitz."
msgstr ""

#: ../changelog.rst:1956
msgid ""
"A file named ``__init__.py`` in the ``versions/`` directory is now "
"ignored by Alembic when the collection of version files is retrieved. "
"Pull request courtesy Michael Floering."
msgstr ""

#: ../changelog.rst:1963
msgid ""
"Fixed Py3K bug where an attempt would be made to sort None against string"
" values when autogenerate would detect tables across multiple schemas, "
"including the default schema.  Pull request courtesy paradoxxxzero."
msgstr ""

#: ../changelog.rst:1971
msgid ""
"Autogenerate render will render the arguments within a Table construct "
"using ``*[...]`` when the number of columns/elements is greater than 255."
"  Pull request courtesy Ryan P. Kelly."
msgstr ""

#: ../changelog.rst:1978
msgid ""
"Fixed bug where foreign key constraints would fail to render in "
"autogenerate when a schema name was present.  Pull request courtesy "
"Andreas Zeidler."
msgstr ""

#: ../changelog.rst:1986
msgid ""
"Some deep-in-the-weeds fixes to try to get \"server default\" comparison "
"working better across platforms and expressions, in particular on the "
"Postgresql backend, mostly dealing with quoting/not quoting of various "
"expressions at the appropriate time and on a per-backend basis. Repaired "
"and tested support for such defaults as Postgresql interval and array "
"defaults."
msgstr ""

#: ../changelog.rst:2005
msgid ""
"Liberalized even more the check for MySQL indexes that shouldn't be "
"counted in autogenerate as \"drops\"; this time it's been reported that "
"an implicitly created index might be named the same as a composite "
"foreign key constraint, and not the actual columns, so we now skip those "
"when detected as well."
msgstr ""

#: ../changelog.rst:1997
msgid ""
"When a run of Alembic command line fails due to ``CommandError``, the "
"output now prefixes the string with ``\"FAILED:\"``, and the error is "
"also written to the log output using ``log.error()``."
msgstr ""

#: ../changelog.rst:2041
msgid ""
"Added new feature "
":paramref:`.EnvironmentContext.configure.transaction_per_migration`, "
"which when True causes the BEGIN/COMMIT pair to incur for each migration "
"individually, rather than for the whole series of migrations.  This is to"
" assist with some database directives that need to be within individual "
"transactions, without the need to disable transactional DDL entirely."
msgstr ""

#: ../changelog.rst:2027
msgid ""
"This releases' \"autogenerate index detection\" bug, when a MySQL table "
"includes an Index with the same name as a column, autogenerate reported "
"it as an \"add\" even though its not; this is because we ignore reflected"
" indexes of this nature due to MySQL creating them implicitly.  Indexes "
"that are named the same as a column are now ignored on MySQL if we see "
"that the backend is reporting that it already exists; this indicates that"
" we can still detect additions of these indexes but not drops, as we "
"cannot distinguish a backend index same-named as the column as one that "
"is user generated or mysql-generated."
msgstr ""

#: ../changelog.rst:2051
msgid ""
"Fixed bug where the ``include_object()`` filter would not receive the "
"original :class:`.Column` object when evaluating a database-only column "
"to be dropped; the object would not include the parent :class:`.Table` "
"nor other aspects of the column that are important for generating the "
"\"downgrade\" case where the column is recreated."
msgstr ""

#: ../changelog.rst:2061
msgid ""
"Fixed bug where :meth:`.EnvironmentContext.get_x_argument` would fail if "
"the :class:`.Config` in use didn't actually originate from a command line"
" call."
msgstr ""

#: ../changelog.rst:2069
msgid ""
"Fixed another bug regarding naming conventions, continuing from "
":ticket:`183`, where add_index() drop_index() directives would not "
"correctly render the ``f()`` construct when the index contained a "
"convention-driven name."
msgstr ""

#: ../changelog.rst:2205
msgid ""
"The :func:`.command.revision` command now returns the :class:`.Script` "
"object corresponding to the newly generated revision.  From this "
"structure, one can get the revision id, the module documentation, and "
"everything else, for use in scripts that call upon this command. Pull "
"request courtesy Robbie Coomber."
msgstr ""

#: ../changelog.rst:2082
msgid ""
"Added quoting to the table name when the special EXEC is run to drop any "
"existing server defaults or constraints when the "
":paramref:`.drop_column.mssql_drop_check` or "
":paramref:`.drop_column.mssql_drop_default` arguments are used."
msgstr ""

#: ../changelog.rst:2092
msgid ""
"Added/fixed support for MySQL \"SET DEFAULT\" / \"DROP DEFAULT\" phrases,"
" which will now be rendered if only the server default is changing or "
"being dropped (e.g. specify None to alter_column() to indicate \"DROP "
"DEFAULT\").  Also added support for rendering MODIFY rather than CHANGE "
"when the column name isn't changing."
msgstr ""

#: ../changelog.rst:2102
msgid ""
"Added support for the ``initially``, ``match`` keyword arguments as well "
"as dialect-specific keyword arguments to "
":meth:`.Operations.create_foreign_key`."
msgstr ""

#: ../changelog.rst
msgid "tags"
msgstr ""

#: ../changelog.rst:2106
msgid "feature"
msgstr ""

#: ../changelog.rst
msgid "tickets"
msgstr ""

#: ../changelog.rst:2107
msgid "163"
msgstr ""

#: ../changelog.rst:2109
msgid ""
"Altered the support for \"sourceless\" migration files (e.g. only .pyc or"
" .pyo present) so that the flag \"sourceless=true\" needs to be in "
"alembic.ini for this behavior to take effect."
msgstr ""

#: ../changelog.rst:2117
msgid ""
"The feature that keeps on giving, index/unique constraint autogenerate "
"detection, has even more fixes, this time to accommodate database "
"dialects that both don't yet report on unique constraints, but the "
"backend does report unique constraints as indexes.   The logic Alembic "
"uses to distinguish between \"this is an index!\" vs. \"this is a unique "
"constraint that is also reported as an index!\" has now been further "
"enhanced to not produce unwanted migrations when the dialect is observed "
"to not yet implement get_unique_constraints() (e.g. mssql). Note that "
"such a backend will no longer report index drops for unique indexes, as "
"these cannot be distinguished from an unreported unique index."
msgstr ""

#: ../changelog.rst:2133
msgid ""
"Extensive changes have been made to more fully support SQLAlchemy's new "
"naming conventions feature.  Note that while SQLAlchemy has added this "
"feature as of 0.9.2, some additional fixes in 0.9.4 are needed to resolve"
" some of the issues:"
msgstr ""

#: ../changelog.rst:2138
msgid ""
"The :class:`.Operations` object now takes into account the naming "
"conventions that are present on the :class:`.MetaData` object that's "
"associated using "
":paramref:`~.EnvironmentContext.configure.target_metadata`. When "
":class:`.Operations` renders a constraint directive like ``ADD "
"CONSTRAINT``, it now will make use of this naming convention when it "
"produces its own temporary :class:`.MetaData` object."
msgstr ""

#: ../changelog.rst:2145
msgid ""
"Note however that the autogenerate feature in most cases generates "
"constraints like foreign keys and unique constraints with the final names"
" intact; the only exception are the constraints implicit with a schema-"
"type like Boolean or Enum.  In most of these cases, the naming convention"
" feature will not take effect for these constraints and will instead use "
"the given name as is, with one exception...."
msgstr ""

#: ../changelog.rst:2152
#, python-format
msgid ""
"Naming conventions which use the ``\"%(constraint_name)s\"`` token, that "
"is, produce a new name that uses the original name as a component, will "
"still be pulled into the naming convention converter and be converted.  "
"The problem arises when autogenerate renders a constraint with it's "
"already-generated name present in the migration file's source code, the "
"name will be doubled up at render time due to the combination of #1 and "
"#2.  So to work around this, autogenerate now renders these already-"
"tokenized names using the new :meth:`.Operations.f` component. This "
"component is only generated if **SQLAlchemy 0.9.4** or greater is in use."
msgstr ""

#: ../changelog.rst:2163
msgid ""
"Therefore it is highly recommended that an upgrade to Alembic 0.6.4 be "
"accompanied by an upgrade of SQLAlchemy 0.9.4, if the new naming "
"conventions feature is used."
msgstr ""

#: ../changelog.rst:2169
msgid ":ref:`autogen_naming_conventions`"
msgstr ""

#: ../changelog.rst:2175
msgid ""
"Suppressed IOErrors which can raise when program output pipe is closed "
"under a program like ``head``; however this only works on Python 2.  On "
"Python 3, there is not yet a known way to suppress the BrokenPipeError "
"warnings without prematurely terminating the program via signals."
msgstr ""

#: ../changelog.rst:2185
msgid ""
"Fixed bug where :meth:`.Operations.bulk_insert` would not function "
"properly when :meth:`.Operations.inline_literal` values were used, either"
" in --sql or non-sql mode.    The values will now render directly in "
"--sql mode.  For compatibility with \"online\" mode, a new flag "
":paramref:`~.Operations.bulk_insert.multiinsert` can be set to False "
"which will cause each parameter set to be compiled and executed with "
"individual INSERT statements."
msgstr ""

#: ../changelog.rst:2197
msgid ""
"Fixed a failure of the system that allows \"legacy keyword arguments\" to"
" be understood, which arose as of a change in Python 3.4 regarding "
"decorators.  A workaround is applied that allows the code to work across "
"Python 3 versions."
msgstr ""

#: ../changelog.rst:2228
msgid ""
"Added new argument "
":paramref:`.EnvironmentContext.configure.user_module_prefix`. This prefix"
" is applied when autogenerate renders a user-defined type, which here is "
"defined as any type that is from a module outside of the ``sqlalchemy.`` "
"hierarchy.   This prefix defaults to ``None``, in which case the "
":paramref:`.EnvironmentContext.configure.sqlalchemy_module_prefix` is "
"used, thus preserving the current behavior."
msgstr ""

#: ../changelog.rst:2285
msgid ""
"The :class:`.ScriptDirectory` system that loads migration files from a  "
"``versions/`` directory now supports so-called \"sourceless\" operation,"
"  where the ``.py`` files are not present and instead ``.pyc`` or "
"``.pyo`` files are directly present where the ``.py`` files should be.  "
"Note that while Python 3.3 has a new system of locating ``.pyc``/``.pyo``"
" files within a directory called ``__pycache__`` (e.g. PEP-3147), "
"PEP-3147 maintains support for the \"source-less imports\" use case, "
"where the ``.pyc``/``.pyo`` are in present in the \"old\" location, e.g. "
"next to the ``.py`` file; this is the usage that's supported even when "
"running Python3.3."
msgstr ""

#: ../changelog.rst:2219
msgid ""
"Added a workaround for when we call ``fcntl.ioctl()`` to get at "
"``TERMWIDTH``; if the function returns zero, as is reported to occur in "
"some pseudo-ttys, the message wrapping system is disabled in the same way"
" as if ``ioctl()`` failed."
msgstr ""

#: ../changelog.rst:2240
msgid ""
"Added support for autogenerate covering the use case where "
":class:`.Table` objects specified in the metadata have an explicit "
"``schema`` attribute whose name matches that of the connection's default "
"schema (e.g. \"public\" for Postgresql).  Previously, it was assumed that"
" \"schema\" was ``None`` when it matched the \"default\" schema, now the "
"comparison adjusts for this."
msgstr ""

#: ../changelog.rst:2250
msgid ""
"The :func:`.compare_metadata` public API function now takes into account "
"the settings for "
":paramref:`.EnvironmentContext.configure.include_object`, "
":paramref:`.EnvironmentContext.configure.include_symbol`, and "
":paramref:`.EnvironmentContext.configure.include_schemas`, in the same "
"way that the ``--autogenerate`` command does.  Pull request courtesy "
"Roman Podoliaka."
msgstr ""

#: ../changelog.rst:2262
msgid ""
"Calling :func:`.bulk_insert` with an empty list will not emit any "
"commands on the current connection.  This was already the case with "
"``--sql`` mode, so is now the case with \"online\" mode."
msgstr ""

#: ../changelog.rst:2269
msgid ""
"Enabled schema support for index and unique constraint autodetection; "
"previously these were non-functional and could in some cases lead to "
"attribute errors.  Pull request courtesy Dimitris Theodorou."
msgstr ""

#: ../changelog.rst:2277
msgid ""
"More fixes to index autodetection; indexes created with expressions like "
"DESC or functional indexes will no longer cause AttributeError exceptions"
" when attempting to compare the columns."
msgstr ""

#: ../changelog.rst:2363
msgid ""
"Added new argument ``mssql_drop_foreign_key`` to "
":meth:`.Operations.drop_column`.  Like ``mssql_drop_default`` and "
"``mssql_drop_check``, will do an inline lookup for a single foreign key "
"which applies to this column, and drop it. For a column with more than "
"one FK, you'd still need to explicitly use "
":meth:`.Operations.drop_constraint` given the name, even though only "
"MSSQL has this limitation in the first place."
msgstr ""

#: ../changelog.rst:2305
msgid ""
"Autogenerate for ``op.create_table()`` will not include a "
"``PrimaryKeyConstraint()`` that has no columns."
msgstr ""

#: ../changelog.rst:2311
msgid ""
"Fixed bug in the not-internally-used :meth:`.ScriptDirectory.get_base` "
"method which would fail if called on an empty versions directory."
msgstr ""

#: ../changelog.rst:2318
msgid ""
"An almost-rewrite of the new unique constraint/index autogenerate "
"detection, to accommodate a variety of issues.  The emphasis is on not "
"generating false positives for those cases where no net change is "
"present, as these errors are the ones that impact all autogenerate runs:"
msgstr ""

#: ../changelog.rst:2324
msgid ""
"Fixed an issue with unique constraint autogenerate detection where a "
"named ``UniqueConstraint`` on both sides with column changes would render"
" with the \"add\" operation before the \"drop\", requiring the user to "
"reverse the order manually."
msgstr ""

#: ../changelog.rst:2329
msgid ""
"Corrected for MySQL's apparent addition of an implicit index for a "
"foreign key column, so that it doesn't show up as \"removed\". This "
"required that the index/constraint autogen system query the dialect-"
"specific implementation for special exceptions."
msgstr ""

#: ../changelog.rst:2334
msgid ""
"reworked the \"dedupe\" logic to accommodate MySQL's bi-directional "
"duplication of unique indexes as unique constraints, and unique "
"constraints as unique indexes.  Postgresql's slightly different logic of "
"duplicating unique constraints into unique indexes continues to be "
"accommodated as well.  Note that a unique index or unique constraint "
"removal on a backend that duplicates these may show up as a distinct "
"\"remove_constraint()\" / \"remove_index()\" pair, which may need to be "
"corrected in the post-autogenerate if multiple backends are being "
"supported."
msgstr ""

#: ../changelog.rst:2344
msgid ""
"added another dialect-specific exception to the SQLite backend when "
"dealing with unnamed unique constraints, as the backend can't currently "
"report on constraints that were made with this technique, hence they'd "
"come out as \"added\" on every run."
msgstr ""

#: ../changelog.rst:2349
msgid ""
"the ``op.create_table()`` directive will be auto-generated with the "
"``UniqueConstraint`` objects inline, but will not double them up with a "
"separate ``create_unique_constraint()`` call, which may have been "
"occurring.  Indexes still get rendered as distinct ``op.create_index()`` "
"calls even when the corresponding table was created in the same script."
msgstr ""

#: ../changelog.rst:2356
msgid ""
"the inline ``UniqueConstraint`` within ``op.create_table()`` includes all"
" the options like ``deferrable``, ``initially``, etc.  Previously these "
"weren't rendering."
msgstr ""

#: ../changelog.rst:2374
msgid ""
"The MSSQL backend will add the batch separator (e.g. ``\"GO\"``) in "
"``--sql`` mode after the final ``COMMIT`` statement, to ensure that "
"statement is also processed in batch mode.  Courtesy Derek Harland."
msgstr ""

#: ../changelog.rst:2394
msgid ""
"Expanded the size of the \"slug\" generated by \"revision\" to 40 "
"characters, which is also configurable by new field "
"``truncate_slug_length``; and also split on the word rather than the "
"character; courtesy Frozenball."
msgstr ""

#: ../changelog.rst:2428
msgid ""
"Support for autogeneration detection and rendering of indexes and unique "
"constraints has been added.  The logic goes through some effort in order "
"to differentiate between true unique constraints and unique indexes, "
"where there are some quirks on backends like Postgresql. The effort here "
"in producing the feature and tests is courtesy of IJL."
msgstr ""

#: ../changelog.rst:2387
msgid ""
"Fixed bug where :func:`.op.alter_column` in the MySQL dialect would fail "
"to apply quotes to column names that had mixed casing or spaces."
msgstr ""

#: ../changelog.rst:2403
msgid ""
"Fixed the output wrapping for Alembic message output, so that we either "
"get the terminal width for \"pretty printing\" with indentation, or if "
"not we just output the text as is; in any case the text won't be wrapped "
"too short."
msgstr ""

#: ../changelog.rst:2411
msgid ""
"Fixes to Py3k in-place compatibity regarding output encoding and related;"
" the use of the new io.* package introduced some incompatibilities on "
"Py2k. These should be resolved, due to the introduction of new adapter "
"types for translating from io.* to Py2k file types, StringIO types. "
"Thanks to Javier Santacruz for help with this."
msgstr ""

#: ../changelog.rst:2421
msgid ""
"Fixed py3k bug where the wrong form of ``next()`` was being called when "
"using the list_templates command.  Courtesy Chris Wilkes."
msgstr ""

#: ../changelog.rst:2437
msgid ""
"Fixed bug introduced by new ``include_object`` argument where the "
"inspected column would be misinterpreted when using a user-defined type "
"comparison function, causing a KeyError or similar expression-related "
"error.  Fix courtesy Maarten van Schaik."
msgstr ""

#: ../changelog.rst:2445
msgid ""
"Added the \"deferrable\" keyword argument to "
":func:`.op.create_foreign_key` so that ``DEFERRABLE`` constraint "
"generation is supported; courtesy Pedro Romano."
msgstr ""

#: ../changelog.rst:2453
msgid ""
"Ensured that strings going to stdout go through an encode/decode phase, "
"so that any non-ASCII characters get to the output stream correctly in "
"both Py2k and Py3k.   Also added source encoding detection using Mako's "
"parse_encoding() routine in Py2k so that the __doc__ of a non-ascii "
"revision file can be treated as unicode in Py2k."
msgstr ""

#: ../changelog.rst:2467
msgid ""
"Added new kw argument to :meth:`.EnvironmentContext.configure` "
"``include_object``.  This is a more flexible version of the "
"``include_symbol`` argument which allows filtering of columns as well as "
"tables from the autogenerate process, and in the future will also work "
"for types, constraints and other constructs.  The fully constructed "
"schema object is passed, including its name and type as well as a flag "
"indicating if the object is from the local application metadata or is "
"reflected."
msgstr ""

#: ../changelog.rst:2479
msgid ""
"The output of the ``alembic history`` command is now expanded to show "
"information about each change on multiple lines, including the full top "
"message, resembling the formatting of git log."
msgstr ""

#: ../changelog.rst:2487
msgid ""
"Added :attr:`alembic.config.Config.cmd_opts` attribute, allows access to "
"the ``argparse`` options passed to the ``alembic`` runner."
msgstr ""

#: ../changelog.rst:2495
msgid ""
"Added new command line argument ``-x``, allows extra arguments to be "
"appended to the command line which can be consumed within an ``env.py`` "
"script by looking at ``context.config.cmd_opts.x``, or more simply a new "
"method :meth:`.EnvironmentContext.get_x_argument`."
msgstr ""

#: ../changelog.rst:2523
msgid ""
"Added ``-r`` argument to ``alembic history`` command, allows "
"specification of ``[start]:[end]`` to view a slice of history.  Accepts "
"revision numbers, symbols \"base\", \"head\", a new symbol \"current\" "
"representing the current migration, as well as relative ranges for one "
"side at a time (i.e. ``-r-5:head``, ``-rcurrent:+3``). Courtesy Atsushi "
"Odagiri for this feature."
msgstr ""

#: ../changelog.rst:2535
msgid ""
"Source base is now in-place for Python 2.6 through 3.3, without the need "
"for 2to3.   Support for Python 2.5 and below has been dropped.   Huge "
"thanks to Hong Minhee for all the effort on this!"
msgstr ""

#: ../changelog.rst:2505
msgid ""
"Added support for options like \"name\" etc. to be rendered within CHECK "
"constraints in autogenerate.  Courtesy Sok Ann Yap."
msgstr ""

#: ../changelog.rst:2517
msgid ""
"Repaired autogenerate rendering of ForeignKeyConstraint to include "
"use_alter argument, if present."
msgstr ""

#: ../changelog.rst:2512
msgid "Source repository has been moved from Mercurial to Git."
msgstr ""

#: ../changelog.rst:2546
msgid ""
"Alembic 0.5.0 now requires at least version 0.7.3 of SQLAlchemy to run "
"properly. Support for 0.6 has been dropped."
msgstr ""

#: ../changelog.rst:2554
msgid ""
"Added ``version_table_schema`` argument to "
":meth:`.EnvironmentContext.configure`, complements the ``version_table`` "
"argument to set an optional remote schema for the version table.  "
"Courtesy Christian Blume."
msgstr ""

#: ../changelog.rst:2572
msgid ""
"Added ``output_encoding`` option to "
":meth:`.EnvironmentContext.configure`, used with ``--sql`` mode to apply "
"an encoding to the output stream."
msgstr ""

#: ../changelog.rst:2581
msgid ""
"Added :meth:`.Operations.create_primary_key` operation, will genenerate "
"an ADD CONSTRAINT for a primary key."
msgstr ""

#: ../changelog.rst:2605
msgid ""
"upgrade and downgrade commands will list the first line of the docstring "
"out next to the version number.  Courtesy Hong Minhee."
msgstr ""

#: ../changelog.rst:2612
msgid ""
"Added --head-only option to \"alembic current\", will print current "
"version plus the symbol \"(head)\" if this version is the head or not. "
"Courtesy Charles-Axel Dein."
msgstr ""

#: ../changelog.rst:2629
msgid ""
"The rendering of any construct during autogenerate can be customized, in "
"particular to allow special rendering for user-defined column, constraint"
" subclasses, using new ``render_item`` argument to "
":meth:`.EnvironmentContext.configure`."
msgstr ""

#: ../changelog.rst:2564
msgid ""
"Fixed format of RENAME for table that includes schema with Postgresql; "
"the schema name shouldn't be in the \"TO\" field."
msgstr ""

#: ../changelog.rst:2589
msgid ""
"Fixed bug whereby double quoting would be applied to target column name "
"during an ``sp_rename`` operation."
msgstr ""

#: ../changelog.rst:2597
msgid ""
"transactional_ddl flag for SQLite, MySQL dialects set to False.  MySQL "
"doesn't support it, SQLite does but current pysqlite driver does not."
msgstr ""

#: ../changelog.rst:2621
msgid ""
"Autogenerate will render additional table keyword arguments like "
"\"mysql_engine\" and others within op.create_table()."
msgstr ""

#: ../changelog.rst:2638
msgid ""
"Fixed bug whereby create_index() would include in the constraint columns "
"that are added to all Table objects using events, externally to the "
"generation of the constraint. This is the same issue that was fixed for "
"unique constraints in version 0.3.2."
msgstr ""

#: ../changelog.rst:2648
msgid ""
"Worked around a backwards-incompatible regression in Python3.3 regarding "
"argparse; running \"alembic\" with no arguments now yields an informative"
" error in py3.3 as with all previous versions. Courtesy Andrey Antukh."
msgstr ""

#: ../changelog.rst:2663
msgid ""
"A host of argument name changes within migration operations for "
"consistency.  Keyword arguments will continue to work on the old name for"
" backwards compatibility, however required positional arguments will not:"
msgstr ""

#: ../changelog.rst:2668
msgid ""
":meth:`.Operations.alter_column` - ``name`` -> ``new_column_name`` - old "
"name will work for backwards compatibility."
msgstr ""

#: ../changelog.rst:2671
msgid ""
":meth:`.Operations.create_index` - ``tablename`` -> ``table_name`` - "
"argument is positional."
msgstr ""

#: ../changelog.rst:2674
msgid ""
":meth:`.Operations.drop_index` - ``tablename`` -> ``table_name`` - old "
"name will work for backwards compatibility."
msgstr ""

#: ../changelog.rst:2677
msgid ""
":meth:`.Operations.drop_constraint` - ``tablename`` -> ``table_name`` - "
"argument is positional."
msgstr ""

#: ../changelog.rst:2680
msgid ""
":meth:`.Operations.drop_constraint` - ``type`` -> ``type_`` - old name "
"will work for backwards compatibility"
msgstr ""

#: ../changelog.rst:2656
msgid ""
"SQLAlchemy 0.6 is no longer supported by Alembic - minimum version is "
"0.7.3, full support is as of 0.7.9."
msgstr ""

#: ../changelog.rst:2731
msgid ""
"Added a README.unittests with instructions for running the test suite "
"fully."
msgstr ""

#: ../changelog.rst:2691
msgid ""
"Fixed bug where autogenerate would fail if a Column to be added to a "
"table made use of the \".key\" paramter."
msgstr ""

#: ../changelog.rst:2698
msgid ""
"The \"implicit\" constraint generated by a type such as Boolean or Enum "
"will not generate an ALTER statement when run on SQlite, which does not "
"support ALTER for the purpose of adding/removing constraints separate "
"from the column def itself. While SQLite supports adding a CHECK "
"constraint at the column level, SQLAlchemy would need modification to "
"support this. A warning is emitted indicating this constraint cannot be "
"added in this scenario."
msgstr ""

#: ../changelog.rst:2713
msgid ""
"Added a workaround to setup.py to prevent \"NoneType\" error from "
"occuring when \"setup.py test\" is run."
msgstr ""

#: ../changelog.rst:2721
msgid ""
"Added an append_constraint() step to each condition within "
"test_autogenerate:AutogenRenderTest.test_render_fk_constraint_kwarg if "
"the SQLAlchemy version is less than 0.8, as ForeignKeyConstraint does not"
" auto-append prior to 0.8."
msgstr ""

#: ../changelog.rst:2759
msgid ""
"Explicit error message describing the case when downgrade --sql is used "
"without specifying specific start/end versions."
msgstr ""

#: ../changelog.rst:2742
msgid ""
"Added support for autogenerate render of ForeignKeyConstraint options "
"onupdate, ondelete, initially, and deferred."
msgstr ""

#: ../changelog.rst:2750
msgid ""
"Autogenerate will include \"autoincrement=False\" in the rendered table "
"metadata if this flag was set to false on the source :class:`.Column` "
"object."
msgstr ""

#: ../changelog.rst:2767
msgid ""
"Removed erroneous \"emit_events\" attribute from "
"operations.create_table() documentation."
msgstr ""

#: ../changelog.rst:2774
msgid ""
"Fixed the minute component in file_template which returned the month part"
" of the create date."
msgstr ""

#: ../changelog.rst:2785
msgid ""
"Support for tables in alternate schemas has been added fully to all "
"operations, as well as to the autogenerate feature.  When using "
"autogenerate, specifying the flag include_schemas=True to "
"Environment.configure() will also cause autogenerate to scan all schemas "
"located by Inspector.get_schema_names(), which is supported by *some* "
"(but not all) SQLAlchemy dialects including Postgresql. *Enormous* thanks"
" to Bruno Binet for a huge effort in implementing as well as writing "
"tests. ."
msgstr ""

#: ../changelog.rst:2800
msgid ""
"The command line runner has been organized into a reusable CommandLine "
"object, so that other front-ends can re-use the argument parsing built "
"in."
msgstr ""

#: ../changelog.rst:2809
msgid ""
"Added \"stdout\" option to Config, provides control over where the "
"\"print\" output of commands like \"history\", \"init\", \"current\" etc."
" are sent."
msgstr ""

#: ../changelog.rst:2847
msgid ""
"Added support for alteration of MySQL columns that have AUTO_INCREMENT, "
"as well as enabling this flag.  Courtesy Moriyoshi Koizumi."
msgstr ""

#: ../changelog.rst:2817
msgid ""
"Fixed the \"multidb\" template which was badly out of date.   It now "
"generates revision files using the configuration to determine the "
"different upgrade_<xyz>() methods needed as well, instead of needing to "
"hardcode these.  Huge thanks to BryceLohr for doing the heavy lifting "
"here."
msgstr ""

#: ../changelog.rst:2828
msgid ""
"Fixed the regexp that was checking for .py files in the version directory"
" to allow any .py file through. Previously it was doing some kind of "
"defensive checking, probably from some early notions of how this "
"directory works, that was prohibiting various filename patterns such as "
"those which begin with numbers."
msgstr ""

#: ../changelog.rst:2839
msgid ""
"Fixed MySQL rendering for server_default which didn't work if the "
"server_default was a generated SQL expression.  Courtesy Moriyoshi "
"Koizumi."
msgstr ""

#: ../changelog.rst:2862
msgid ""
"Added include_symbol option to EnvironmentContext.configure(), specifies "
"a callable which will include/exclude tables in their entirety from the "
"autogeneration process based on name."
msgstr ""

#: ../changelog.rst:2872
msgid "Added year, month, day, hour, minute, second variables to file_template."
msgstr ""

#: ../changelog.rst:2879
msgid ""
"Added 'primary' to the list of constraint types recognized for MySQL "
"drop_constraint()."
msgstr ""

#: ../changelog.rst:2886
msgid ""
"Added --sql argument to the \"revision\" command, for the use case where "
"the \"revision_environment\" config option is being used but SQL access "
"isn't desired."
msgstr ""

#: ../changelog.rst:2895
msgid ""
"Repaired create_foreign_key() for self-referential foreign keys, which "
"weren't working at all."
msgstr ""

#: ../changelog.rst:2903
msgid ""
"'alembic' command reports an informative error message when the "
"configuration is missing the 'script_directory' key."
msgstr ""

#: ../changelog.rst:2911
msgid ""
"Fixes made to the constraints created/dropped alongside so-called "
"\"schema\" types such as Boolean and Enum.  The create/drop constraint "
"logic does not kick in when using a dialect that doesn't use constraints "
"for these types, such as postgresql, even when existing_type is specified"
" to alter_column().  Additionally, the constraints are not affected if "
"existing_type is passed but type\\_ is not, i.e. there's no net change in"
" type."
msgstr ""

#: ../changelog.rst:2926
msgid ""
"Improved error message when specifiying non-ordered revision identifiers "
"to cover the case when the \"higher\" rev is None, improved message "
"overall."
msgstr ""

#: ../changelog.rst:2955
msgid ""
"Implemented SQL rendering for CheckConstraint() within autogenerate "
"upgrade, including for literal SQL as well as SQL Expression Language "
"expressions."
msgstr ""

#: ../changelog.rst:2939
msgid ""
"Fixed issue whereby reflected server defaults wouldn't be quoted "
"correctly; uses repr() now."
msgstr ""

#: ../changelog.rst:2946
msgid ""
"Fixed issue whereby when autogenerate would render create_table() on the "
"upgrade side for a table that has a Boolean type, an unnecessary "
"CheckConstraint() would be generated."
msgstr ""

#: ../changelog.rst:2968
msgid "Fixed command-line bug introduced by the \"revision_environment\" feature."
msgstr ""

#: ../changelog.rst:2979
msgid ""
"New config argument \"revision_environment=true\", causes env.py to be "
"run unconditionally when the \"revision\" command is run, to support "
"script.py.mako templates with dependencies on custom \"template_args\"."
msgstr ""

#: ../changelog.rst:2989
msgid ""
"Added \"template_args\" option to configure() so that an env.py can add "
"additional arguments to the template context when running the "
"\"revision\" command.  This requires either --autogenerate or the "
"configuration directive \"revision_environment=true\"."
msgstr ""

#: ../changelog.rst:3009
msgid ""
"Added version_table argument to EnvironmentContext.configure(), allowing "
"for the configuration of the version table name."
msgstr ""

#: ../changelog.rst:3017
msgid ""
"Added support for \"relative\" migration identifiers, i.e. \"alembic "
"upgrade +2\", \"alembic downgrade -1\".  Courtesy Atsushi Odagiri for "
"this feature."
msgstr ""

#: ../changelog.rst:2999
msgid ""
"Added \"type\" argument to op.drop_constraint(), and implemented full "
"constraint drop support for MySQL.  CHECK and undefined raise an error. "
"MySQL needs the constraint type in order to emit a DROP CONSTRAINT."
msgstr ""

#: ../changelog.rst:3026
msgid ""
"Fixed bug whereby directories inside of the template directories, such as"
" __pycache__ on Pypy, would mistakenly be interpreted as files which are "
"part of the template."
msgstr ""

#: ../changelog.rst:3039
msgid "Basic support for Oracle added, courtesy shgoh."
msgstr ""

#: ../changelog.rst:3046
msgid ""
"Added support for UniqueConstraint in autogenerate, courtesy Atsushi "
"Odagiri"
msgstr ""

#: ../changelog.rst:3053
msgid ""
"Fixed support of schema-qualified ForeignKey target in column alter "
"operations, courtesy Alexander Kolov."
msgstr ""

#: ../changelog.rst:3061
msgid ""
"Fixed bug whereby create_unique_constraint() would include in the "
"constraint columns that are added to all Table objects using events, "
"externally to the generation of the constraint."
msgstr ""

#: ../changelog.rst:3074
msgid "bulk_insert() fixes:"
msgstr ""

#: ../changelog.rst:3076
msgid ""
"bulk_insert() operation was not working most likely since the 0.2 series "
"when used with an engine."
msgstr ""

#: ../changelog.rst:3079
msgid ""
"Repaired bulk_insert() to complete when used against a lower-case-t table"
" and executing with only one set of parameters, working around SQLAlchemy"
" bug #2461 in this regard."
msgstr ""

#: ../changelog.rst:3083
msgid ""
"bulk_insert() uses \"inline=True\" so that phrases like RETURNING and "
"such don't get invoked for single-row bulk inserts."
msgstr ""

#: ../changelog.rst:3086
msgid ""
"bulk_insert() will check that you're passing a list of dictionaries in, "
"raises TypeError if not detected."
msgstr ""

#: ../changelog.rst:3117
msgid ""
"Added a bit of autogenerate to the public API in the form of the function"
" alembic.autogenerate.compare_metadata."
msgstr ""

#: ../changelog.rst:3098
msgid ""
"The focus of 0.3 is to clean up and more fully document the public API of"
" Alembic, including better accessors on the MigrationContext and "
"ScriptDirectory objects.  Methods that are not considered to be public on"
" these objects have been underscored, and methods which should be public "
"have been cleaned up and documented, including:"
msgstr ""

#: ../changelog.rst:3106
msgid ""
"MigrationContext.get_current_revision() "
"ScriptDirectory.iterate_revisions() ScriptDirectory.get_current_head() "
"ScriptDirectory.get_heads() ScriptDirectory.get_base() "
"ScriptDirectory.generate_revision()"
msgstr ""

#: ../changelog.rst:3132
msgid ""
"Informative error message when op.XYZ directives are invoked at module "
"import time."
msgstr ""

#: ../changelog.rst:3164
msgid ""
"Added execution_options parameter to op.execute(), will call "
"execution_options() on the Connection before executing."
msgstr ""

#: ../changelog.rst:3168
msgid ""
"The immediate use case here is to allow access to the new no_parameters "
"option in SQLAlchemy 0.7.6, which allows some DBAPIs (psycopg2, MySQLdb) "
"to allow percent signs straight through without escaping, thus providing "
"cross-compatible operation with DBAPI execution and static script "
"generation."
msgstr ""

#: ../changelog.rst:3188
msgid ""
"script_location can be interpreted by pkg_resources.resource_filename(), "
"if it is a non-absolute URI that contains colons.   This scheme is the "
"same one used by Pyramid."
msgstr ""

#: ../changelog.rst:3198
msgid ""
"added missing support for onupdate/ondelete flags for "
"ForeignKeyConstraint, courtesy Giacomo Bagnoli"
msgstr ""

#: ../changelog.rst:3139
msgid ""
"Fixed inappropriate direct call to util.err() and therefore sys.exit() "
"when Config failed to locate the config file within library usage."
msgstr ""

#: ../changelog.rst:3148
msgid ""
"Autogenerate will emit CREATE TABLE and DROP TABLE directives according "
"to foreign key dependency order."
msgstr ""

#: ../changelog.rst:3156
msgid ""
"implement 'tablename' parameter on drop_index() as this is needed by some"
" backends."
msgstr ""

#: ../changelog.rst:3181
msgid "setup.py won't install argparse if on Python 2.7/3.2"
msgstr ""

#: ../changelog.rst:3206
msgid ""
"fixed a regression regarding an autogenerate error message, as well as "
"various glitches in the Pylons sample template.  The Pylons sample "
"template requires that you tell it where to get the Engine from now.  "
"courtesy Marcin Kuzminski"
msgstr ""

#: ../changelog.rst:3217
msgid ""
"drop_index() ensures a dummy column is added when it calls \"Index\", as "
"SQLAlchemy 0.7.6 will warn on index with no column names."
msgstr ""

#: ../changelog.rst:3229
msgid "Fixed the generation of CHECK constraint, regression from 0.2.0"
msgstr ""

#: ../changelog.rst:3240
msgid ""
"API rearrangement allows everything Alembic does to be represented by "
"contextual objects, including EnvironmentContext, MigrationContext, and "
"Operations.   Other libraries and applications can now use things like "
"\"alembic.op\" without relying upon global configuration variables. The "
"rearrangement was done such that existing migrations should be OK, as "
"long as they use the pattern of \"from alembic import context\" and "
"\"from alembic import op\", as these are now contextual objects, not "
"modules."
msgstr ""

#: ../changelog.rst:3258
msgid ""
"The naming of revision files can now be customized to be some combination"
" of \"rev id\" and \"slug\", the latter of which is based on the revision"
" message. By default, the pattern \"<rev>_<slug>\" is used for new files."
"   New script files should include the \"revision\" variable for this to "
"work, which is part of the newer script.py.mako scripts."
msgstr ""

#: ../changelog.rst:3299
msgid ""
"Can create alembic.config.Config with no filename, use set_main_option() "
"to add values.  Also added set_section_option() which will add sections."
msgstr ""

#: ../changelog.rst:3272
msgid ""
"env.py templates call connection.close() to better support programmatic "
"usage of commands; use NullPool in conjunction with create_engine() as "
"well so that no connection resources remain afterwards."
msgstr ""

#: ../changelog.rst:3283
msgid ""
"fix the config.main() function to honor the arguments passed, remove no "
"longer used \"scripts/alembic\" as setuptools creates this for us."
msgstr ""

#: ../changelog.rst:3292
msgid ""
"Fixed alteration of column type on MSSQL to not include the keyword "
"\"TYPE\"."
msgstr ""

#: ../changelog.rst:3322
msgid "PyPy is supported."
msgstr ""

#: ../changelog.rst:3328
msgid "Python 2.5 is supported, needs __future__.with_statement"
msgstr ""

#: ../changelog.rst:3367
msgid ""
"Add alembic_module_prefix argument to configure() to complement "
"sqlalchemy_module_prefix."
msgstr ""

#: ../changelog.rst:3315
msgid "Clean up file write operations so that file handles are closed."
msgstr ""

#: ../changelog.rst:3335
msgid ""
"Fix autogenerate so that \"pass\" is generated between the two comments "
"if no net migrations were present."
msgstr ""

#: ../changelog.rst:3343
msgid ""
"Fix autogenerate bug that prevented correct reflection of a foreign-key "
"referenced table in the list of \"to remove\"."
msgstr ""

#: ../changelog.rst:3351
msgid ""
"Fix bug where create_table() didn't handle self-referential foreign key "
"correctly"
msgstr ""

#: ../changelog.rst:3359
msgid ""
"Default prefix for autogenerate directives is \"op.\", matching the mako "
"templates."
msgstr ""

#: ../changelog.rst:3375
msgid "fix quotes not being rendered in ForeignKeConstraint during autogenerate"
msgstr ""

#: ../changelog.rst:3387
msgid "Initial release.  Status of features:"
msgstr ""

#: ../changelog.rst:3393
msgid ""
"Alembic is used in at least one production environment, but should still "
"be considered ALPHA LEVEL SOFTWARE as of this release, particularly in "
"that many features are expected to be missing / unimplemented.   Major "
"API changes are not anticipated but for the moment nothing should be "
"assumed."
msgstr ""

#: ../changelog.rst:3401
msgid ""
"The author asks that you *please* report all issues, missing features, "
"workarounds etc. to the bugtracker."
msgstr ""

#: ../changelog.rst:3409
msgid "Python 3 is supported and has been tested."
msgstr ""

#: ../changelog.rst:3415
msgid ""
"The \"Pylons\" and \"MultiDB\" environment templates have not been "
"directly tested - these should be considered to be samples to be modified"
" as needed.   Multiple database support itself is well tested, however."
msgstr ""

#: ../changelog.rst:3425
msgid ""
"Postgresql and MS SQL Server environments have been tested for several "
"weeks in a production environment.  In particular, some involved "
"workarounds were implemented to allow fully-automated dropping of "
"default- or constraint-holding columns with SQL Server."
msgstr ""

#: ../changelog.rst:3436
msgid ""
"MySQL support has also been implemented to a basic degree, including "
"MySQL's awkward style of modifying columns being accommodated."
msgstr ""

#: ../changelog.rst:3444
msgid ""
"Other database environments not included among those three have *not* "
"been tested, *at all*.  This includes Firebird, Oracle, Sybase.   Adding "
"support for these backends should be straightforward.  Please report all "
"missing/ incorrect behaviors to the bugtracker! Patches are welcome here "
"but are optional - please just indicate the exact format expected by the "
"target database."
msgstr ""

#: ../changelog.rst:3458
msgid ""
"SQLite, as a backend, has almost no support for schema alterations to "
"existing databases.  The author would strongly recommend that SQLite not "
"be used in a migration context - just dump your SQLite database into an "
"intermediary format, then dump it back into a new schema.  For dev "
"environments, the dev installer should be building the whole DB from "
"scratch.  Or just use Postgresql, which is a much better database for "
"non-trivial schemas. Requests for full ALTER support on SQLite should be "
"reported to SQLite's bug tracker at "
"http://www.sqlite.org/src/wiki?name=Bug+Reports, as Alembic will not be "
"implementing the \"rename the table to a temptable then copy the data "
"into a new table\" workaround. Note that Alembic will at some point offer"
" an extensible API so that you can implement commands like this yourself."
msgstr ""

#: ../changelog.rst:3481
msgid ""
"Well-tested directives include add/drop table, add/drop column, including"
" support for SQLAlchemy \"schema\" types which generate additional CHECK "
"constraints, i.e. Boolean, Enum.  Other directives not included here have"
" *not* been strongly tested in production, i.e. rename table, etc."
msgstr ""

#: ../changelog.rst:3492
msgid ""
"Both \"online\" and \"offline\" migrations, the latter being generated "
"SQL scripts to hand off to a DBA, have been strongly production tested "
"against Postgresql and SQL Server."
msgstr ""

#: ../changelog.rst:3501
msgid ""
"Modify column type, default status, nullable, is functional and tested "
"across PG, MSSQL, MySQL, but not yet widely tested in production usage."
msgstr ""

#: ../changelog.rst:3509
msgid ""
"Many migrations are still outright missing, i.e. create/add sequences, "
"etc.  As a workaround, execute() can be used for those which are missing,"
" though posting of tickets for new features/missing behaviors is strongly"
" encouraged."
msgstr ""

#: ../changelog.rst:3519
msgid ""
"Autogenerate feature is implemented and has been tested, though only a "
"little bit in a production setting. In particular, detection of type and "
"server default changes are optional and are off by default; they can also"
" be customized by a callable. Both features work but can have surprises "
"particularly the disparity between BIT/TINYINT and boolean, which hasn't "
"yet been worked around, as well as format changes performed by the "
"database on defaults when it reports back.  When enabled, the PG dialect "
"will execute the two defaults to be compared to see if they are "
"equivalent.  Other backends may need to do the same thing."
msgstr ""

#: ../changelog.rst:3533
msgid ""
"The autogenerate feature only generates \"candidate\" commands which must"
" be hand-tailored in any case, so is still a useful feature and is safe "
"to use.  Please report missing/broken features of autogenerate!  This "
"will be a great feature and will also improve SQLAlchemy's reflection "
"services."
msgstr ""

#: ../changelog.rst:3544
msgid ""
"Support for non-ASCII table, column and constraint names is mostly "
"nonexistent.   This is also a straightforward feature add as SQLAlchemy "
"itself supports unicode identifiers; Alembic itself will likely need "
"fixes to logging, column identification by key, etc. for full support "
"here."
msgstr ""

