# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2019, Mike Bayer
# This file is distributed under the same license as the Alembic package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Alembic 1.0.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-04 13:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../api/runtime.rst:5
msgid "Runtime Objects"
msgstr ""

#: ../api/runtime.rst:7
msgid ""
"The \"runtime\" of Alembic involves the :class:`.EnvironmentContext` and "
":class:`.MigrationContext` objects.   These are the objects that are in "
"play once the ``env.py`` script is loaded up by a command and a migration"
" operation proceeds."
msgstr ""

#: ../api/runtime.rst:13
msgid "The Environment Context"
msgstr ""

#: ../api/runtime.rst:15
msgid ""
"The :class:`.EnvironmentContext` class provides most of the API used "
"within an ``env.py`` script.  Within ``env.py``, the instantated "
":class:`.EnvironmentContext` is made available via a special *proxy "
"module* called ``alembic.context``.   That is, you can import "
"``alembic.context`` like a regular Python module, and each name you call "
"upon it is ultimately routed towards the current "
":class:`.EnvironmentContext` in use."
msgstr ""

#: ../api/runtime.rst:23
msgid ""
"In particular, the key method used within ``env.py`` is "
":meth:`.EnvironmentContext.configure`, which establishes all the details "
"about how the database will be accessed."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext:1 of
msgid "A configurational facade made available in an ``env.py`` script."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext:3 of
msgid ""
"The :class:`.EnvironmentContext` acts as a *facade* to the more nuts-and-"
"bolts objects of :class:`.MigrationContext` as well as certain aspects of"
" :class:`.Config`, within the context of the ``env.py`` script that is "
"invoked by most Alembic commands."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext:9 of
msgid ""
":class:`.EnvironmentContext` is normally instantiated when a command in "
":mod:`alembic.command` is run.  It then makes itself available in the "
"``alembic.context`` module for the scope of the command.   From within an"
" ``env.py`` script, the current :class:`.EnvironmentContext` is available"
" by importing this module."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext:15 of
msgid ""
":class:`.EnvironmentContext` also supports programmatic usage. At this "
"level, it acts as a Python context manager, that is, is intended to be "
"used using the ``with:`` statement.  A typical use of "
":class:`.EnvironmentContext`::"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext:44 of
msgid ""
"The above script will invoke the ``env.py`` script within the migration "
"environment.  If and when ``env.py`` calls "
":meth:`.MigrationContext.run_migrations`, the ``my_function()`` function "
"above will be called by the :class:`.MigrationContext`, given the context"
" itself as well as the current revision in the database."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext:53 of
msgid ""
"For most API usages other than full blown invocation of migration "
"scripts, the :class:`.MigrationContext` and :class:`.ScriptDirectory` "
"objects can be created and used directly.  The "
":class:`.EnvironmentContext` object is *only* needed when you need to "
"actually invoke the ``env.py`` module present in the migration "
"environment."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext:61 of
msgid "Construct a new :class:`.EnvironmentContext`."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext
#: alembic.runtime.environment.EnvironmentContext.configure
#: alembic.runtime.migration.MigrationContext.configure
#: alembic.runtime.migration.MigrationContext.run_migrations of
msgid "Parameters"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext:63 of
msgid "a :class:`.Config` instance."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext:64 of
msgid "a :class:`.ScriptDirectory` instance."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext:65 of
msgid ""
"keyword options that will be ultimately passed along to the "
":class:`.MigrationContext` when :meth:`.EnvironmentContext.configure` is "
"called."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.begin_transaction:1 of
msgid ""
"Return a context manager that will enclose an operation within a "
"\"transaction\", as defined by the environment's offline and "
"transactional DDL settings."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.begin_transaction:6 of
msgid "e.g.::"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.begin_transaction:11 of
msgid ""
":meth:`.begin_transaction` is intended to \"do the right thing\" "
"regardless of calling context:"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.begin_transaction:15 of
msgid ""
"If :meth:`.is_transactional_ddl` is ``False``, returns a \"do nothing\" "
"context manager which otherwise produces no transactional state or "
"directives."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.begin_transaction:19 of
msgid ""
"If :meth:`.is_offline_mode` is ``True``, returns a context manager that "
"will invoke the :meth:`.DefaultImpl.emit_begin` and "
":meth:`.DefaultImpl.emit_commit` methods, which will produce the string "
"directives ``BEGIN`` and ``COMMIT`` on the output stream, as rendered by "
"the target backend (e.g. SQL Server would emit ``BEGIN TRANSACTION``)."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.begin_transaction:28 of
msgid ""
"Otherwise, calls :meth:`sqlalchemy.engine.Connection.begin` on the "
"current online connection, which returns a "
":class:`sqlalchemy.engine.Transaction` object.  This object demarcates a "
"real transaction and is itself a context manager, which will roll back if"
" an exception is raised."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.begin_transaction:36 of
msgid ""
"Note that a custom ``env.py`` script which has more specific "
"transactional needs can of course manipulate the "
":class:`~sqlalchemy.engine.Connection` directly to produce transactional "
"state in \"online\" mode."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.config:1 of
msgid ""
"An instance of :class:`.Config` representing the configuration file "
"contents as well as other variables set programmatically within it."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:1 of
msgid ""
"Configure a :class:`.MigrationContext` within this "
":class:`.EnvironmentContext` which will provide database connectivity and"
" other configuration to a series of migration scripts."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:6 of
msgid ""
"Many methods on :class:`.EnvironmentContext` require that this method has"
" been called in order to function, as they ultimately need to have "
"database access or at least access to the dialect in use.  Those which do"
" are documented as such."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:11 of
msgid ""
"The important thing needed by :meth:`.configure` is a means to determine "
"what kind of database dialect is in use. An actual connection to that "
"database is needed only if the :class:`.MigrationContext` is to be used "
"in \"online\" mode."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:17 of
msgid ""
"If the :meth:`.is_offline_mode` function returns ``True``, then no "
"connection is needed here.  Otherwise, the ``connection`` parameter "
"should be present as an instance of "
":class:`sqlalchemy.engine.Connection`."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:22 of
msgid ""
"This function is typically called from the ``env.py`` script within a "
"migration environment.  It can be called multiple times for an "
"invocation.  The most recent :class:`~sqlalchemy.engine.Connection` for "
"which it was called is the one that will be operated upon by the next "
"call to :meth:`.run_migrations`."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:29 of
msgid "General parameters:"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:31
#: alembic.runtime.migration.MigrationContext.configure:6 of
msgid ""
"a :class:`~sqlalchemy.engine.Connection` to use for SQL execution in "
"\"online\" mode.  When present, is also used to determine the type of "
"dialect in use."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:35
#: alembic.runtime.migration.MigrationContext.configure:9 of
msgid ""
"a string database url, or a :class:`sqlalchemy.engine.url.URL` object. "
"The type of dialect to be used will be derived from this if "
"``connection`` is not passed."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:39 of
msgid ""
"string name of a dialect, such as \"postgresql\", \"mssql\", etc. The "
"type of dialect to be used will be derived from this if ``connection`` "
"and ``url`` are not passed."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:43 of
msgid ""
"Force the usage of \"transactional\" DDL on or off; this otherwise "
"defaults to whether or not the dialect in use supports it."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:47 of
msgid ""
"if True, nest each migration script in a transaction rather than the full"
" series of migrations to run.  .. versionadded:: 0.6.5"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:47 of
msgid ""
"if True, nest each migration script in a transaction rather than the full"
" series of migrations to run."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:53 of
msgid ""
"a file-like object that will be used for textual output when the "
"``--sql`` option is used to generate SQL scripts. Defaults to "
"``sys.stdout`` if not passed here and also not present on the "
":class:`.Config` object.  The value here overrides that of the "
":class:`.Config` object."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:61 of
msgid ""
"when using ``--sql`` to generate SQL scripts, apply this encoding to the "
"string output."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:63 of
msgid ""
"when using ``--sql`` to generate SQL scripts, pass through the "
"``literal_binds`` flag to the compiler so that any literal values that "
"would ordinarily be bound parameters are converted to plain strings.  .. "
"warning:: Dialects can typically only handle simple datatypes    like "
"strings and numbers for auto-literal generation.  Datatypes    like "
"dates, intervals, and others may still require manual    formatting, "
"typically using :meth:`.Operations.inline_literal`.  .. note:: the "
"``literal_binds`` flag is ignored on SQLAlchemy    versions prior to 0.8 "
"where this feature is not supported.  .. versionadded:: 0.7.6  .. "
"seealso::     :meth:`.Operations.inline_literal`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:63 of
msgid ""
"when using ``--sql`` to generate SQL scripts, pass through the "
"``literal_binds`` flag to the compiler so that any literal values that "
"would ordinarily be bound parameters are converted to plain strings."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:68 of
msgid ""
"Dialects can typically only handle simple datatypes like strings and "
"numbers for auto-literal generation.  Datatypes like dates, intervals, "
"and others may still require manual formatting, typically using "
":meth:`.Operations.inline_literal`."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:73 of
msgid ""
"the ``literal_binds`` flag is ignored on SQLAlchemy versions prior to 0.8"
" where this feature is not supported."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:80 of
msgid ":meth:`.Operations.inline_literal`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:82 of
msgid "Override the \"starting revision\" argument when using ``--sql`` mode."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:84 of
msgid ""
"a string tag for usage by custom ``env.py`` scripts. Set via the "
"``--tag`` option, can be overridden here."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:86 of
msgid ""
"dictionary of template arguments which will be added to the template "
"argument environment when running the \"revision\" command.   Note that "
"the script environment is only run within the \"revision\" command if the"
" --autogenerate option is used, or if the option "
"\"revision_environment=true\" is present in the alembic.ini file."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:93 of
msgid ""
"The name of the Alembic version table. The default is "
"``'alembic_version'``."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:95 of
msgid "Optional schema to place version table within."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:97 of
msgid ""
"boolean, whether the Alembic version table should use a primary key "
"constraint for the \"value\" column; this only takes effect when the "
"table is first created. Defaults to True; setting to False should not be "
"necessary and is here for backwards compatibility reasons.  .. "
"versionadded:: 0.8.10  Added the    "
":paramref:`.EnvironmentContext.configure.version_table_pk`    flag and "
"additionally established that the Alembic version table    has a primary "
"key constraint by default."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:97 of
msgid ""
"boolean, whether the Alembic version table should use a primary key "
"constraint for the \"value\" column; this only takes effect when the "
"table is first created. Defaults to True; setting to False should not be "
"necessary and is here for backwards compatibility reasons."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:103 of
msgid ""
"Added the :paramref:`.EnvironmentContext.configure.version_table_pk` flag"
" and additionally established that the Alembic version table has a "
"primary key constraint by default."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:108 of
msgid ""
"a callable or collection of callables to be run for each migration step. "
"The callables will be run in the order they are given, once for each "
"migration step, after the respective operation has been applied but "
"before its transaction is finalized. Each callable accepts no positional "
"arguments and the following keyword arguments:  * ``ctx``: the "
":class:`.MigrationContext` running the migration, * ``step``: a "
":class:`.MigrationInfo` representing the   step currently being applied, "
"* ``heads``: a collection of version strings representing the   current "
"heads, * ``run_args``: the ``**kwargs`` passed to "
":meth:`.run_migrations`.  .. versionadded:: 0.9.3"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:108 of
msgid ""
"a callable or collection of callables to be run for each migration step. "
"The callables will be run in the order they are given, once for each "
"migration step, after the respective operation has been applied but "
"before its transaction is finalized. Each callable accepts no positional "
"arguments and the following keyword arguments:"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:116 of
msgid "``ctx``: the :class:`.MigrationContext` running the migration,"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:117 of
msgid ""
"``step``: a :class:`.MigrationInfo` representing the step currently being"
" applied,"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:119 of
msgid "``heads``: a collection of version strings representing the current heads,"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:121 of
msgid "``run_args``: the ``**kwargs`` passed to :meth:`.run_migrations`."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:126 of
msgid ""
"Parameters specific to the autogenerate feature, when ``alembic "
"revision`` is run with the ``--autogenerate`` feature:"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:129 of
msgid ""
"a :class:`sqlalchemy.schema.MetaData` object, or a sequence of "
":class:`~sqlalchemy.schema.MetaData` objects, that will be consulted "
"during autogeneration. The tables present in each "
":class:`~sqlalchemy.schema.MetaData` will be compared against what is "
"locally available on the target :class:`~sqlalchemy.engine.Connection` to"
" produce candidate upgrade/downgrade operations.  .. versionchanged:: "
"0.9.0 the    :paramref:`.EnvironmentContext.configure.target_metadata`"
"    parameter may now be passed a sequence of    "
":class:`~sqlalchemy.schema.MetaData` objects to support    autogeneration"
" of multiple :class:`~sqlalchemy.schema.MetaData`    collections."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:129 of
msgid ""
"a :class:`sqlalchemy.schema.MetaData` object, or a sequence of "
":class:`~sqlalchemy.schema.MetaData` objects, that will be consulted "
"during autogeneration. The tables present in each "
":class:`~sqlalchemy.schema.MetaData` will be compared against what is "
"locally available on the target :class:`~sqlalchemy.engine.Connection` to"
" produce candidate upgrade/downgrade operations."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:138 of
msgid ""
"the :paramref:`.EnvironmentContext.configure.target_metadata` parameter "
"may now be passed a sequence of :class:`~sqlalchemy.schema.MetaData` "
"objects to support autogeneration of multiple "
":class:`~sqlalchemy.schema.MetaData` collections."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:145 of
msgid ""
"Indicates type comparison behavior during an autogenerate operation.  "
"Defaults to ``False`` which disables type comparison.  Set to ``True`` to"
" turn on default type comparison, which has varied accuracy depending on "
"backend.   See :ref:`compare_types` for an example as well as information"
" on other type comparison options.  .. seealso::     :ref:`compare_types`"
"     :paramref:`.EnvironmentContext.configure.compare_server_default`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:145 of
msgid ""
"Indicates type comparison behavior during an autogenerate operation.  "
"Defaults to ``False`` which disables type comparison.  Set to ``True`` to"
" turn on default type comparison, which has varied accuracy depending on "
"backend.   See :ref:`compare_types` for an example as well as information"
" on other type comparison options."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:156 of
msgid ":ref:`compare_types`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:158 of
msgid ":paramref:`.EnvironmentContext.configure.compare_server_default`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:160 of
msgid ""
"Indicates server default comparison behavior during an autogenerate "
"operation.  Defaults to ``False`` which disables server default "
"comparison.  Set to  ``True`` to turn on server default comparison, which"
" has varied accuracy depending on backend.  To customize server default "
"comparison behavior, a callable may be specified which can filter server "
"default comparisons during an autogenerate operation. defaults during an "
"autogenerate operation.   The format of this callable is::     def "
"my_compare_server_default(context, inspected_column,                "
"metadata_column, inspected_default, metadata_default,                "
"rendered_metadata_default):        # return True if the defaults are "
"different,        # False if not, or None to allow the default "
"implementation        # to compare these defaults        return None     "
"context.configure(        # ...        compare_server_default = "
"my_compare_server_default    )  ``inspected_column`` is a dictionary "
"structure as returned by "
":meth:`sqlalchemy.engine.reflection.Inspector.get_columns`, whereas "
"``metadata_column`` is a :class:`sqlalchemy.schema.Column` from the local"
" model environment.  A return value of ``None`` indicates to allow "
"default server default comparison to proceed.  Note that some backends "
"such as Postgresql actually execute the two defaults on the database side"
" to compare for equivalence.  .. seealso::     "
":paramref:`.EnvironmentContext.configure.compare_type`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:160 of
msgid ""
"Indicates server default comparison behavior during an autogenerate "
"operation.  Defaults to ``False`` which disables server default "
"comparison.  Set to  ``True`` to turn on server default comparison, which"
" has varied accuracy depending on backend."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:168 of
msgid ""
"To customize server default comparison behavior, a callable may be "
"specified which can filter server default comparisons during an "
"autogenerate operation. defaults during an autogenerate operation.   The "
"format of this callable is::"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:188 of
msgid ""
"``inspected_column`` is a dictionary structure as returned by "
":meth:`sqlalchemy.engine.reflection.Inspector.get_columns`, whereas "
"``metadata_column`` is a :class:`sqlalchemy.schema.Column` from the local"
" model environment."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:193 of
msgid ""
"A return value of ``None`` indicates to allow default server default "
"comparison to proceed.  Note that some backends such as Postgresql "
"actually execute the two defaults on the database side to compare for "
"equivalence."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:201 of
msgid ":paramref:`.EnvironmentContext.configure.compare_type`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:203 of
msgid ""
"A callable function which is given the chance to return ``True`` or "
"``False`` for any object, indicating if the given object should be "
"considered in the autogenerate sweep.  The function accepts the following"
" positional arguments:  * ``object``: a "
":class:`~sqlalchemy.schema.SchemaItem` object such   as a "
":class:`~sqlalchemy.schema.Table`,   :class:`~sqlalchemy.schema.Column`,"
"   :class:`~sqlalchemy.schema.Index`   "
":class:`~sqlalchemy.schema.UniqueConstraint`,   or "
":class:`~sqlalchemy.schema.ForeignKeyConstraint` object * ``name``: the "
"name of the object. This is typically available   via ``object.name``. * "
"``type``: a string describing the type of object; currently   "
"``\"table\"``, ``\"column\"``, ``\"index\"``, ``\"unique_constraint\"``,"
"   or ``\"foreign_key_constraint\"``    .. versionadded:: 0.7.0 Support "
"for indexes and unique constraints      within the      "
":paramref:`~.EnvironmentContext.configure.include_object` hook.    .. "
"versionadded:: 0.7.1 Support for foreign keys within the      "
":paramref:`~.EnvironmentContext.configure.include_object` hook.  * "
"``reflected``: ``True`` if the given object was produced based on   table"
" reflection, ``False`` if it's from a local :class:`.MetaData`   object. "
"* ``compare_to``: the object being compared against, if available,   else"
" ``None``.  E.g.::     def include_object(object, name, type_, reflected,"
" compare_to):        if (type_ == \"column\" and            not reflected"
" and            object.info.get(\"skip_autogenerate\", False)):"
"            return False        else:            return True     "
"context.configure(        # ...        include_object = include_object"
"    )  :paramref:`.EnvironmentContext.configure.include_object` can also "
"be used to filter on specific schemas to include or omit, when the "
":paramref:`.EnvironmentContext.configure.include_schemas` flag is set to "
"``True``.   The :attr:`.Table.schema` attribute on each :class:`.Table` "
"object reflected will indicate the name of the schema from which the "
":class:`.Table` originates.  .. versionadded:: 0.6.0  .. seealso::     "
":paramref:`.EnvironmentContext.configure.include_schemas`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:203 of
msgid ""
"A callable function which is given the chance to return ``True`` or "
"``False`` for any object, indicating if the given object should be "
"considered in the autogenerate sweep."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:208 of
msgid "The function accepts the following positional arguments:"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:210 of
msgid ""
"``object``: a :class:`~sqlalchemy.schema.SchemaItem` object such as a "
":class:`~sqlalchemy.schema.Table`, :class:`~sqlalchemy.schema.Column`, "
":class:`~sqlalchemy.schema.Index` "
":class:`~sqlalchemy.schema.UniqueConstraint`, or "
":class:`~sqlalchemy.schema.ForeignKeyConstraint` object"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:216 of
msgid ""
"``name``: the name of the object. This is typically available via "
"``object.name``."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:218 of
msgid ""
"``type``: a string describing the type of object; currently "
"``\"table\"``, ``\"column\"``, ``\"index\"``, ``\"unique_constraint\"``, "
"or ``\"foreign_key_constraint\"``"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:222 of
msgid ""
"Support for indexes and unique constraints within the "
":paramref:`~.EnvironmentContext.configure.include_object` hook."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:226 of
msgid ""
"Support for foreign keys within the "
":paramref:`~.EnvironmentContext.configure.include_object` hook."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:229 of
msgid ""
"``reflected``: ``True`` if the given object was produced based on table "
"reflection, ``False`` if it's from a local :class:`.MetaData` object."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:232 of
msgid ""
"``compare_to``: the object being compared against, if available, else "
"``None``."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:235
#: alembic.runtime.environment.EnvironmentContext.configure:274 of
msgid "E.g.::"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:250 of
msgid ""
":paramref:`.EnvironmentContext.configure.include_object` can also be used"
" to filter on specific schemas to include or omit, when the "
":paramref:`.EnvironmentContext.configure.include_schemas` flag is set to "
"``True``.   The :attr:`.Table.schema` attribute on each :class:`.Table` "
"object reflected will indicate the name of the schema from which the "
":class:`.Table` originates."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:261
#: alembic.runtime.environment.EnvironmentContext.configure:286 of
msgid ":paramref:`.EnvironmentContext.configure.include_schemas`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:263 of
msgid ""
"A callable function which, given a table name and schema name (may be "
"``None``), returns ``True`` or ``False``, indicating if the given table "
"should be considered in the autogenerate sweep.  .. deprecated:: 0.6.0"
"    :paramref:`.EnvironmentContext.configure.include_symbol`    is "
"superceded by the more generic    "
":paramref:`.EnvironmentContext.configure.include_object`    parameter.  "
"E.g.::     def include_symbol(tablename, schema):        return tablename"
" not in (\"skip_table_one\", \"skip_table_two\")     context.configure("
"        # ...        include_symbol = include_symbol    )  .. seealso::"
"     :paramref:`.EnvironmentContext.configure.include_schemas`     "
":paramref:`.EnvironmentContext.configure.include_object`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:263 of
msgid ""
"A callable function which, given a table name and schema name (may be "
"``None``), returns ``True`` or ``False``, indicating if the given table "
"should be considered in the autogenerate sweep."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:268 of
msgid ""
":paramref:`.EnvironmentContext.configure.include_symbol` is superceded by"
" the more generic "
":paramref:`.EnvironmentContext.configure.include_object` parameter."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:288
#: alembic.runtime.environment.EnvironmentContext.configure:311 of
msgid ":paramref:`.EnvironmentContext.configure.include_object`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:290 of
msgid ""
"if True, commands which alter elements within a table will be placed "
"under a ``with batch_alter_table():`` directive, so that batch migrations"
" will take place.  .. versionadded:: 0.7.0  .. seealso::     "
":ref:`batch_migrations`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:290 of
msgid ""
"if True, commands which alter elements within a table will be placed "
"under a ``with batch_alter_table():`` directive, so that batch migrations"
" will take place."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:298 of
msgid ":ref:`batch_migrations`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:300 of
msgid ""
"If True, autogenerate will scan across all schemas located by the "
"SQLAlchemy "
":meth:`~sqlalchemy.engine.reflection.Inspector.get_schema_names` method, "
"and include all differences in tables found across all those schemas.  "
"When using this option, you may want to also use the "
":paramref:`.EnvironmentContext.configure.include_object` option to "
"specify a callable which can filter the tables/schemas that get included."
"  .. seealso::     "
":paramref:`.EnvironmentContext.configure.include_object`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:300 of
msgid ""
"If True, autogenerate will scan across all schemas located by the "
"SQLAlchemy "
":meth:`~sqlalchemy.engine.reflection.Inspector.get_schema_names` method, "
"and include all differences in tables found across all those schemas.  "
"When using this option, you may want to also use the "
":paramref:`.EnvironmentContext.configure.include_object` option to "
"specify a callable which can filter the tables/schemas that get included."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:313 of
msgid ""
"Callable that can be used to override how any schema item, i.e. column, "
"constraint, type, etc., is rendered for autogenerate.  The callable "
"receives a string describing the type of object, the object, and the "
"autogen context.  If it returns False, the default rendering method will "
"be used.  If it returns None, the item will not be rendered in the "
"context of a Table construct, that is, can be used to skip columns or "
"constraints within op.create_table()::     def my_render_column(type_, "
"col, autogen_context):        if type_ == \"column\" and isinstance(col, "
"MySpecialCol):            return repr(col)        else:            return"
" False     context.configure(        # ...        render_item = "
"my_render_column    )  Available values for the type string include: "
"``\"column\"``, ``\"primary_key\"``, ``\"foreign_key\"``, ``\"unique\"``,"
" ``\"check\"``, ``\"type\"``, ``\"server_default\"``.  .. seealso::     "
":ref:`autogen_render_types`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:313 of
msgid ""
"Callable that can be used to override how any schema item, i.e. column, "
"constraint, type, etc., is rendered for autogenerate.  The callable "
"receives a string describing the type of object, the object, and the "
"autogen context.  If it returns False, the default rendering method will "
"be used.  If it returns None, the item will not be rendered in the "
"context of a Table construct, that is, can be used to skip columns or "
"constraints within op.create_table()::"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:334 of
msgid ""
"Available values for the type string include: ``\"column\"``, "
"``\"primary_key\"``, ``\"foreign_key\"``, ``\"unique\"``, ``\"check\"``, "
"``\"type\"``, ``\"server_default\"``."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:340 of
msgid ":ref:`autogen_render_types`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:342 of
msgid ""
"When autogenerate completes, the text of the candidate upgrade operations"
" will be present in this template variable when ``script.py.mako`` is "
"rendered.  Defaults to ``upgrades``."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:346 of
msgid ""
"When autogenerate completes, the text of the candidate downgrade "
"operations will be present in this template variable when "
"``script.py.mako`` is rendered.  Defaults to ``downgrades``."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:351 of
msgid ""
"When autogenerate refers to Alembic :mod:`alembic.operations` constructs,"
" this prefix will be used (i.e. ``op.create_table``)  Defaults to "
"\"``op.``\". Can be ``None`` to indicate no prefix."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:356 of
msgid ""
"When autogenerate refers to SQLAlchemy :class:`~sqlalchemy.schema.Column`"
" or type classes, this prefix will be used (i.e. "
"``sa.Column(\"somename\", sa.Integer)``)  Defaults to \"``sa.``\". Can be"
" ``None`` to indicate no prefix. Note that when dialect-specific types "
"are rendered, autogenerate will render them using the dialect module "
"name, i.e. ``mssql.BIT()``, ``postgresql.UUID()``."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:366 of
msgid ""
"When autogenerate refers to a SQLAlchemy type (e.g. :class:`.TypeEngine`)"
" where the module name is not under the ``sqlalchemy`` namespace, this "
"prefix will be used within autogenerate.  If left at its default of "
"``None``, the ``__module__`` attribute of the type is used to render the "
"import module.   It's a good practice to set this and to have all custom "
"types be available from a fixed module space, in order to future-proof "
"migration files against reorganizations in modules.  .. versionchanged:: "
"0.7.0    :paramref:`.EnvironmentContext.configure.user_module_prefix`    "
"no longer defaults to the value of    "
":paramref:`.EnvironmentContext.configure.sqlalchemy_module_prefix`    "
"when left at ``None``; the ``__module__`` attribute is now used.  .. "
"versionadded:: 0.6.3 added    "
":paramref:`.EnvironmentContext.configure.user_module_prefix`  .. "
"seealso::     :ref:`autogen_module_prefix`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:366 of
msgid ""
"When autogenerate refers to a SQLAlchemy type (e.g. :class:`.TypeEngine`)"
" where the module name is not under the ``sqlalchemy`` namespace, this "
"prefix will be used within autogenerate.  If left at its default of "
"``None``, the ``__module__`` attribute of the type is used to render the "
"import module.   It's a good practice to set this and to have all custom "
"types be available from a fixed module space, in order to future-proof "
"migration files against reorganizations in modules."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:376 of
msgid ""
":paramref:`.EnvironmentContext.configure.user_module_prefix` no longer "
"defaults to the value of "
":paramref:`.EnvironmentContext.configure.sqlalchemy_module_prefix` when "
"left at ``None``; the ``__module__`` attribute is now used."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:382 of
msgid "added :paramref:`.EnvironmentContext.configure.user_module_prefix`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:387 of
msgid ":ref:`autogen_module_prefix`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:389 of
msgid ""
"a callable function that will be passed a structure representing the end "
"result of an autogenerate or plain \"revision\" operation, which can be "
"manipulated to affect how the ``alembic revision`` command ultimately "
"outputs new revision scripts.   The structure of the callable is::     "
"def process_revision_directives(context, revision, directives):        "
"pass  The ``directives`` parameter is a Python list containing a single "
":class:`.MigrationScript` directive, which represents the revision file "
"to be generated.    This list as well as its contents may be freely "
"modified to produce any set of commands. The section "
":ref:`customizing_revision` shows an example of doing this.  The "
"``context`` parameter is the :class:`.MigrationContext` in use, and "
"``revision`` is a tuple of revision identifiers representing the current "
"revision of the database.  The callable is invoked at all times when the "
"``--autogenerate`` option is passed to ``alembic revision``.  If "
"``--autogenerate`` is not passed, the callable is invoked only if the "
"``revision_environment`` variable is set to True in the Alembic "
"configuration, in which case the given ``directives`` collection will "
"contain empty :class:`.UpgradeOps` and :class:`.DowngradeOps` collections"
" for ``.upgrade_ops`` and ``.downgrade_ops``.  The ``--autogenerate`` "
"option itself can be inferred by inspecting "
"``context.config.cmd_opts.autogenerate``.  The callable function may "
"optionally be an instance of a :class:`.Rewriter` object.  This is a "
"helper object that assists in the production of autogenerate-stream "
"rewriter functions.   .. versionadded:: 0.8.0  .. versionchanged:: 0.8.1 "
"- The    "
":paramref:`.EnvironmentContext.configure.process_revision_directives`    "
"hook can append op directives into :class:`.UpgradeOps` and    "
":class:`.DowngradeOps` which will be rendered in Python regardless    of "
"whether the ``--autogenerate`` option is in use or not;    the "
"``revision_environment`` configuration variable should be    set to "
"\"true\" in the config to enable this.   .. seealso::      "
":ref:`customizing_revision`      :ref:`autogen_rewriter`      "
":paramref:`.command.revision.process_revision_directives`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:389 of
msgid ""
"a callable function that will be passed a structure representing the end "
"result of an autogenerate or plain \"revision\" operation, which can be "
"manipulated to affect how the ``alembic revision`` command ultimately "
"outputs new revision scripts.   The structure of the callable is::"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:398 of
msgid ""
"The ``directives`` parameter is a Python list containing a single "
":class:`.MigrationScript` directive, which represents the revision file "
"to be generated.    This list as well as its contents may be freely "
"modified to produce any set of commands. The section "
":ref:`customizing_revision` shows an example of doing this.  The "
"``context`` parameter is the :class:`.MigrationContext` in use, and "
"``revision`` is a tuple of revision identifiers representing the current "
"revision of the database."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:408 of
msgid ""
"The callable is invoked at all times when the ``--autogenerate`` option "
"is passed to ``alembic revision``.  If ``--autogenerate`` is not passed, "
"the callable is invoked only if the ``revision_environment`` variable is "
"set to True in the Alembic configuration, in which case the given "
"``directives`` collection will contain empty :class:`.UpgradeOps` and "
":class:`.DowngradeOps` collections for ``.upgrade_ops`` and "
"``.downgrade_ops``.  The ``--autogenerate`` option itself can be inferred"
" by inspecting ``context.config.cmd_opts.autogenerate``."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:418 of
msgid ""
"The callable function may optionally be an instance of a "
":class:`.Rewriter` object.  This is a helper object that assists in the "
"production of autogenerate-stream rewriter functions."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:425 of
msgid ""
"- The "
":paramref:`.EnvironmentContext.configure.process_revision_directives` "
"hook can append op directives into :class:`.UpgradeOps` and "
":class:`.DowngradeOps` which will be rendered in Python regardless of "
"whether the ``--autogenerate`` option is in use or not; the "
"``revision_environment`` configuration variable should be set to \"true\""
" in the config to enable this."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:436 of
msgid ":ref:`customizing_revision`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:438 of
msgid ":ref:`autogen_rewriter`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:440 of
msgid ":paramref:`.command.revision.process_revision_directives`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:442 of
msgid "Parameters specific to individual backends:"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:444 of
msgid ""
"The \"batch separator\" which will be placed between each statement when "
"generating offline SQL Server migrations.  Defaults to ``GO``.  Note this"
" is in addition to the customary semicolon ``;`` at the end of each "
"statement; SQL Server considers the \"batch separator\" to denote the end"
" of an individual statement execution, and cannot group certain dependent"
" operations in one step."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.configure:451 of
msgid ""
"The \"batch separator\" which will be placed between each statement when "
"generating offline Oracle migrations.  Defaults to ``/``.  Oracle doesn't"
" add a semicolon between statements like most other backends."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.execute:1 of
msgid "Execute the given SQL using the current change context."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.execute:3 of
msgid ""
"The behavior of :meth:`.execute` is the same as that of "
":meth:`.Operations.execute`.  Please see that function's documentation "
"for full detail including caveats and limitations."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.execute:8
#: alembic.runtime.environment.EnvironmentContext.get_bind:7
#: alembic.runtime.environment.EnvironmentContext.is_transactional_ddl:8
#: alembic.runtime.environment.EnvironmentContext.run_migrations:16 of
msgid ""
"This function requires that a :class:`.MigrationContext` has first been "
"made available via :meth:`.configure`."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_bind:1 of
msgid "Return the current 'bind'."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_bind:3 of
msgid ""
"In \"online\" mode, this is the :class:`sqlalchemy.engine.Connection` "
"currently being used to emit SQL to the database."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_context:1 of
msgid "Return the current :class:`.MigrationContext` object."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_context:3 of
msgid ""
"If :meth:`.EnvironmentContext.configure` has not been called yet, raises "
"an exception."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_head_revision:1 of
msgid "Return the hex identifier of the 'head' script revision."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_head_revision:3 of
msgid ""
"If the script directory has multiple heads, this method raises a "
":class:`.CommandError`; :meth:`.EnvironmentContext.get_head_revisions` "
"should be preferred."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_head_revision:7
#: alembic.runtime.environment.EnvironmentContext.get_head_revisions:6
#: alembic.runtime.environment.EnvironmentContext.get_revision_argument:10
#: alembic.runtime.environment.EnvironmentContext.get_starting_revision_argument:8
#: alembic.runtime.environment.EnvironmentContext.get_tag_argument:8
#: alembic.runtime.environment.EnvironmentContext.get_x_argument:29
#: alembic.runtime.environment.EnvironmentContext.is_offline_mode:7 of
msgid ""
"This function does not require that the :class:`.MigrationContext` has "
"been configured."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_head_revision:10 of
msgid ":meth:`.EnvironmentContext.get_head_revisions`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_head_revisions:1 of
msgid "Return the hex identifier of the 'heads' script revision(s)."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_head_revisions:3 of
msgid ""
"This returns a tuple containing the version number of all heads in the "
"script directory."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_revision_argument:1 of
msgid "Get the 'destination' revision argument."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_revision_argument:3 of
msgid ""
"This is typically the argument passed to the ``upgrade`` or ``downgrade``"
" command."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_revision_argument:6 of
msgid ""
"If it was specified as ``head``, the actual version number is returned; "
"if specified as ``base``, ``None`` is returned."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_starting_revision_argument:1
#: of
msgid ""
"Return the 'starting revision' argument, if the revision was passed using"
" ``start:end``."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_starting_revision_argument:4
#: of
msgid ""
"This is only meaningful in \"offline\" mode. Returns ``None`` if no value"
" is available or was configured."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_tag_argument:1 of
msgid "Return the value passed for the ``--tag`` argument, if any."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_tag_argument:3 of
msgid ""
"The ``--tag`` argument is not used directly by Alembic, but is available "
"for custom ``env.py`` configurations that wish to use it; particularly "
"for offline generation scripts that wish to generate tagged filenames."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_tag_argument:13 of
msgid ""
":meth:`.EnvironmentContext.get_x_argument` - a newer and more open ended "
"system of extending ``env.py`` scripts via the command line."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_x_argument:1 of
msgid "Return the value(s) passed for the ``-x`` argument, if any."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_x_argument:3 of
msgid ""
"The ``-x`` argument is an open ended flag that allows any user-defined "
"value or values to be passed on the command line, then available here for"
" consumption by a custom ``env.py`` script."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_x_argument:7 of
msgid ""
"The return value is a list, returned directly from the ``argparse`` "
"structure.  If ``as_dictionary=True`` is passed, the ``x`` arguments are "
"parsed using ``key=value`` format into a dictionary that is then "
"returned."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_x_argument:12 of
msgid ""
"For example, to support passing a database URL on the command line, the "
"standard ``env.py`` script can be modified like this::"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_x_argument:25 of
msgid "This then takes effect by running the ``alembic`` script as::"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_x_argument:36 of
msgid ":meth:`.EnvironmentContext.get_tag_argument`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.get_x_argument:38 of
msgid ":attr:`.Config.cmd_opts`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.is_offline_mode:1 of
msgid ""
"Return True if the current migrations environment is running in \"offline"
" mode\"."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.is_offline_mode:4 of
msgid "This is ``True`` or ``False`` depending on the the ``--sql`` flag passed."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.is_transactional_ddl:1 of
msgid ""
"Return True if the context is configured to expect a transactional DDL "
"capable backend."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.is_transactional_ddl:4 of
msgid ""
"This defaults to the type of database in use, and can be overridden by "
"the ``transactional_ddl`` argument to :meth:`.configure`"
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.run_migrations:1 of
msgid ""
"Run migrations as determined by the current command line configuration as"
" well as versioning information present (or not) in the current database "
"connection (if one is present)."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.run_migrations:6 of
msgid ""
"The function accepts optional ``**kw`` arguments.   If these are passed, "
"they are sent directly to the ``upgrade()`` and ``downgrade()`` functions"
" within each target revision file.   By modifying the ``script.py.mako`` "
"file so that the ``upgrade()`` and ``downgrade()`` functions accept "
"arguments, parameters can be passed here so that contextual information, "
"usually information to identify a particular database in use, can be "
"passed from a custom ``env.py`` script to the migration functions."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.script:1 of
msgid ""
"An instance of :class:`.ScriptDirectory` which provides programmatic "
"access to version files within the ``versions/`` directory."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.static_output:1 of
msgid "Emit text directly to the \"offline\" SQL stream."
msgstr ""

#: alembic.runtime.environment.EnvironmentContext.static_output:3 of
msgid ""
"Typically this is for emitting comments that start with --.  The "
"statement is not treated as a SQL execution, no ; or batch separator is "
"added, etc."
msgstr ""

#: ../api/runtime.rst:32
msgid "The Migration Context"
msgstr ""

#: ../api/runtime.rst:34
msgid ""
"The :class:`.MigrationContext` handles the actual work to be performed "
"against a database backend as migration operations proceed.  It is "
"generally not exposed to the end-user, except when the "
":paramref:`~.EnvironmentContext.configure.on_version_apply` callback hook"
" is used."
msgstr ""

#: alembic.runtime.migration.MigrationContext:1 of
msgid "Represent the database state made available to a migration script."
msgstr ""

#: alembic.runtime.migration.MigrationContext:4 of
msgid ""
":class:`.MigrationContext` is the front end to an actual database "
"connection, or alternatively a string output stream given a particular "
"database dialect, from an Alembic perspective."
msgstr ""

#: alembic.runtime.migration.MigrationContext:9 of
msgid ""
"When inside the ``env.py`` script, the :class:`.MigrationContext` is "
"available via the :meth:`.EnvironmentContext.get_context` method, which "
"is available at ``alembic.context``::"
msgstr ""

#: alembic.runtime.migration.MigrationContext:18 of
msgid ""
"For usage outside of an ``env.py`` script, such as for utility routines "
"that want to check the current version in the database, the "
":meth:`.MigrationContext.configure` method to create new "
":class:`.MigrationContext` objects. For example, to get at the current "
"revision in the database using "
":meth:`.MigrationContext.get_current_revision`::"
msgstr ""

#: alembic.runtime.migration.MigrationContext:35 of
msgid ""
"The above context can also be used to produce Alembic migration "
"operations with an :class:`.Operations` instance::"
msgstr ""

#: alembic.runtime.migration.MigrationContext.bind:1 of
msgid "Return the current \"bind\"."
msgstr ""

#: alembic.runtime.migration.MigrationContext.bind:3 of
msgid ""
"In online mode, this is an instance of "
":class:`sqlalchemy.engine.Connection`, and is suitable for ad-hoc "
"execution of any kind of usage described in :ref:`sqlexpression_toplevel`"
" as well as for usage with the :meth:`sqlalchemy.schema.Table.create` and"
" :meth:`sqlalchemy.schema.MetaData.create_all` methods of "
":class:`~sqlalchemy.schema.Table`, :class:`~sqlalchemy.schema.MetaData`."
msgstr ""

#: alembic.runtime.migration.MigrationContext.bind:12 of
msgid ""
"Note that when \"standard output\" mode is enabled, this bind will be a "
"\"mock\" connection handler that cannot return results and is only "
"appropriate for a very limited subset of commands."
msgstr ""

#: alembic.runtime.migration.MigrationContext.config:1 of
msgid "Return the :class:`.Config` used by the current environment, if any."
msgstr ""

#: alembic.runtime.migration.MigrationContext.configure:1 of
msgid "Create a new :class:`.MigrationContext`."
msgstr ""

#: alembic.runtime.migration.MigrationContext.configure:3 of
msgid ""
"This is a factory method usually called by "
":meth:`.EnvironmentContext.configure`."
msgstr ""

#: alembic.runtime.migration.MigrationContext.configure:13 of
msgid ""
"string name of a dialect, such as \"postgresql\", \"mssql\", etc.  The "
"type of dialect to be used will be derived from this if ``connection`` "
"and ``url`` are not passed."
msgstr ""

#: alembic.runtime.migration.MigrationContext.configure:16 of
msgid ""
"dictionary of options.  Most other options accepted by "
":meth:`.EnvironmentContext.configure` are passed via this dictionary."
msgstr ""

#: alembic.runtime.migration.MigrationContext.execute:1 of
msgid "Execute a SQL construct or string statement."
msgstr ""

#: alembic.runtime.migration.MigrationContext.execute:3 of
msgid ""
"The underlying execution mechanics are used, that is if this is \"offline"
" mode\" the SQL is written to the output buffer, otherwise the SQL is "
"emitted on the current SQLAlchemy connection."
msgstr ""

#: alembic.runtime.migration.MigrationContext.get_current_heads:1 of
msgid ""
"Return a tuple of the current 'head versions' that are represented in the"
" target database."
msgstr ""

#: alembic.runtime.migration.MigrationContext.get_current_heads:4 of
msgid ""
"For a migration stream without branches, this will be a single value, "
"synonymous with that of :meth:`.MigrationContext.get_current_revision`."
"   However when multiple unmerged branches exist within the target "
"database, the returned tuple will contain a value for each head."
msgstr ""

#: alembic.runtime.migration.MigrationContext.get_current_heads:10 of
msgid ""
"If this :class:`.MigrationContext` was configured in \"offline\" mode, "
"that is with ``as_sql=True``, the ``starting_rev`` parameter is returned "
"in a one-length tuple."
msgstr ""

#: alembic.runtime.migration.MigrationContext.get_current_heads:14 of
msgid ""
"If no version table is present, or if there are no revisions present, an "
"empty tuple is returned."
msgstr ""

#: alembic.runtime.migration.MigrationContext.get_current_revision:1 of
msgid ""
"Return the current revision, usually that which is present in the "
"``alembic_version`` table in the database."
msgstr ""

#: alembic.runtime.migration.MigrationContext.get_current_revision:4 of
msgid ""
"This method intends to be used only for a migration stream that does not "
"contain unmerged branches in the target database; if there are multiple "
"branches present, an exception is raised. The "
":meth:`.MigrationContext.get_current_heads` should be preferred over this"
" method going forward in order to be compatible with branch migration "
"support."
msgstr ""

#: alembic.runtime.migration.MigrationContext.get_current_revision:11 of
msgid ""
"If this :class:`.MigrationContext` was configured in \"offline\" mode, "
"that is with ``as_sql=True``, the ``starting_rev`` parameter is returned "
"instead, if any."
msgstr ""

#: alembic.runtime.migration.MigrationContext.run_migrations:1 of
msgid ""
"Run the migration scripts established for this "
":class:`.MigrationContext`, if any."
msgstr ""

#: alembic.runtime.migration.MigrationContext.run_migrations:4 of
msgid ""
"The commands in :mod:`alembic.command` will set up a function that is "
"ultimately passed to the :class:`.MigrationContext` as the ``fn`` "
"argument.  This function represents the \"work\" that will be done when "
":meth:`.MigrationContext.run_migrations` is called, typically from within"
" the ``env.py`` script of the migration environment.  The \"work "
"function\" then provides an iterable of version callables and other "
"version information which in the case of the ``upgrade`` or ``downgrade``"
" commands are the list of version scripts to invoke.  Other commands "
"yield nothing, in the case that a command wants to run some other "
"operation against the database such as the ``current`` or ``stamp`` "
"commands."
msgstr ""

#: alembic.runtime.migration.MigrationContext.run_migrations:16 of
msgid ""
"keyword arguments here will be passed to each migration callable, that is"
" the ``upgrade()`` or ``downgrade()`` method within revision scripts."
msgstr ""

#: alembic.runtime.migration.MigrationContext.stamp:1 of
msgid "Stamp the version table with a specific revision."
msgstr ""

#: alembic.runtime.migration.MigrationContext.stamp:3 of
msgid ""
"This method calculates those branches to which the given revision can "
"apply, and updates those branches as though they were migrated towards "
"that revision (either up or down).  If no current branches include the "
"revision, it is added as a new branch head."
msgstr ""

#: alembic.runtime.migration.MigrationInfo:1 of
msgid "Exposes information about a migration step to a callback listener."
msgstr ""

#: alembic.runtime.migration.MigrationInfo:3 of
msgid ""
"The :class:`.MigrationInfo` object is available exclusively for the "
"benefit of the :paramref:`.EnvironmentContext.on_version_apply` callback "
"hook."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.destination_revision_ids:1 of
msgid "Active revisions after this migration step is applied."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.destination_revisions:1 of
msgid ""
"Get :attr:`~MigrationInfo.destination_revision_ids` as a tuple of "
":class:`Revisions <.Revision>`."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.down_revision_ids:1 of
msgid "Tuple of strings representing the base revisions of this migration step."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.down_revision_ids:3 of
msgid ""
"If empty, this represents a root revision; otherwise, the first item "
"corresponds to :attr:`.Revision.down_revision`, and the rest are inferred"
" from dependencies."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.down_revisions:1 of
msgid ""
"Get :attr:`~.MigrationInfo.down_revision_ids` as a tuple of "
":class:`Revisions <.Revision>`."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.is_migration:1 of
msgid "True/False: indicates whether this operation is a migration."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.is_migration:3 of
msgid ""
"At present this is true if and only the migration is not a stamp. If "
"other operation types are added in the future, both this attribute and "
":attr:`~.MigrationInfo.is_stamp` will be false."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.is_stamp:1 of
msgid ""
"True/False: indicates whether this operation is a stamp (i.e. whether it "
"results in any actual database operations)."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.is_upgrade:1 of
msgid ""
"True/False: indicates whether this operation ascends or descends the "
"version tree."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.revision_map:1 of
msgid "The revision map inside of which this operation occurs."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.source_revision_ids:1 of
msgid "Active revisions before this migration step is applied."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.source_revisions:1 of
msgid ""
"Get :attr:`~MigrationInfo.source_revision_ids` as a tuple of "
":class:`Revisions <.Revision>`."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.up_revision:1 of
msgid "Get :attr:`~.MigrationInfo.up_revision_id` as a :class:`.Revision`."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.up_revision_id:1 of
msgid "Version string corresponding to :attr:`.Revision.revision`."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.up_revision_id:3 of
msgid ""
"In the case of a stamp operation, it is advised to use the "
":attr:`.MigrationInfo.up_revision_ids` tuple as a stamp operation can "
"make a single movement from one or more branches down to a single "
"branchpoint, in which case there will be multiple \"up\" revisions."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.up_revision_id:10 of
msgid ":attr:`.MigrationInfo.up_revision_ids`"
msgstr ""

#: alembic.runtime.migration.MigrationInfo.up_revision_ids:1 of
msgid "Tuple of version strings corresponding to :attr:`.Revision.revision`."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.up_revision_ids:3 of
msgid ""
"In the majority of cases, this tuple will be a single value, synonomous "
"with the scalar value of :attr:`.MigrationInfo.up_revision_id`. It can be"
" multiple revision identifiers only in the case of an ``alembic stamp`` "
"operation which is moving downwards from multiple branches down to their "
"common branch point."
msgstr ""

#: alembic.runtime.migration.MigrationInfo.up_revisions:1 of
msgid "Get :attr:`~.MigrationInfo.up_revision_ids` as a :class:`.Revision`."
msgstr ""

