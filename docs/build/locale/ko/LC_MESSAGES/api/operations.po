# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2019, Mike Bayer
# This file is distributed under the same license as the Alembic package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Alembic 1.0.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-04 13:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../api/operations.rst:5
msgid "Operation Directives"
msgstr ""

#: ../api/operations.rst:7
msgid ""
"this section discusses the **internal API of Alembic** as regards the "
"internal system of defining migration operation directives. This section "
"is only useful for developers who wish to extend the capabilities of "
"Alembic.  For end-user guidance on Alembic migration operations, please "
"see :ref:`ops`."
msgstr ""

#: ../api/operations.rst:13
msgid ""
"Within migration scripts, actual database migration operations are "
"handled via an instance of :class:`.Operations`.   The "
":class:`.Operations` class lists out available migration operations that "
"are linked to a :class:`.MigrationContext`, which communicates "
"instructions originated by the :class:`.Operations` object into SQL that "
"is sent to a database or SQL output stream."
msgstr ""

#: ../api/operations.rst:20
msgid ""
"Most methods on the :class:`.Operations` class are generated dynamically "
"using a \"plugin\" system, described in the next section "
":ref:`operation_plugins`.   Additionally, when Alembic migration scripts "
"actually run, the methods on the current :class:`.Operations` object are "
"proxied out to the ``alembic.op`` module, so that they are available "
"using module-style access."
msgstr ""

#: ../api/operations.rst:27
msgid ""
"For an overview of how to use an :class:`.Operations` object directly in "
"programs, as well as for reference to the standard operation methods as "
"well as \"batch\" methods, see :ref:`ops`."
msgstr ""

#: ../api/operations.rst:34
msgid "Operation Plugins"
msgstr ""

#: ../api/operations.rst:36
msgid ""
"The Operations object is extensible using a plugin system.   This system "
"allows one to add new ``op.<some_operation>`` methods at runtime.  The "
"steps to use this system are to first create a subclass of "
":class:`.MigrateOperation`, register it using the "
":meth:`.Operations.register_operation` class decorator, then build a "
"default \"implementation\" function which is established using the "
":meth:`.Operations.implementation_for` decorator."
msgstr ""

#: ../api/operations.rst:43
msgid ""
"- the :class:`.Operations` class is now an open namespace that is "
"extensible via the creation of new :class:`.MigrateOperation` subclasses."
msgstr ""

#: ../api/operations.rst:47
msgid ""
"Below we illustrate a very simple operation ``CreateSequenceOp`` which "
"will implement a new method ``op.create_sequence()`` for use in migration"
" scripts::"
msgstr ""

#: ../api/operations.rst:91
msgid ""
"Above, the ``CreateSequenceOp`` and ``DropSequenceOp`` classes represent "
"new operations that will be available as ``op.create_sequence()`` and "
"``op.drop_sequence()``. The reason the operations are represented as "
"stateful classes is so that an operation and a specific set of arguments "
"can be represented generically; the state can then correspond to "
"different kinds of operations, such as invoking the instruction against a"
" database, or autogenerating Python code for the operation into a script."
msgstr ""

#: ../api/operations.rst:101
msgid ""
"In order to establish the migrate-script behavior of the new operations, "
"we use the :meth:`.Operations.implementation_for` decorator::"
msgstr ""

#: ../api/operations.rst:121
msgid ""
"Above, we use the simplest possible technique of invoking our DDL, which "
"is just to call :meth:`.Operations.execute` with literal SQL.  If this is"
" all a custom operation needs, then this is fine.  However, options for "
"more comprehensive support include building out a custom SQL construct, "
"as documented at :ref:`sqlalchemy.ext.compiler_toplevel`."
msgstr ""

#: ../api/operations.rst:127
msgid ""
"With the above two steps, a migration script can now use new methods "
"``op.create_sequence()`` and ``op.drop_sequence()`` that will proxy to "
"our object as a classmethod::"
msgstr ""

#: ../api/operations.rst:137
msgid ""
"The registration of new operations only needs to occur in time for the "
"``env.py`` script to invoke :meth:`.MigrationContext.run_migrations`; "
"within the module level of the ``env.py`` script is sufficient."
msgstr ""

#: ../api/operations.rst:143
msgid ""
":ref:`autogen_custom_ops` - how to add autogenerate support to custom "
"operations."
msgstr ""

#: ../api/operations.rst:146
msgid ""
"- the migration operations available via the :class:`.Operations` class "
"as well as the ``alembic.op`` namespace is now extensible using a plugin "
"system."
msgstr ""

#: ../api/operations.rst:155
msgid "Built-in Operation Objects"
msgstr ""

#: ../api/operations.rst:157
msgid ""
"The migration operations present on :class:`.Operations` are themselves "
"delivered via operation objects that represent an operation and its "
"arguments.   All operations descend from the :class:`.MigrateOperation` "
"class, and are registered with the :class:`.Operations` class using the "
":meth:`.Operations.register_operation` class decorator.  The "
":class:`.MigrateOperation` objects also serve as the basis for how the "
"autogenerate system renders new migration scripts."
msgstr ""

#: ../api/operations.rst:167 alembic.operations.ops.MigrateOperation:11 of
msgid ":ref:`operation_plugins`"
msgstr ""

#: ../api/operations.rst:169 alembic.operations.ops.DowngradeOps:6
#: alembic.operations.ops.MigrateOperation:13
#: alembic.operations.ops.MigrationScript:25
#: alembic.operations.ops.UpgradeOps:6 of
msgid ":ref:`customizing_revision`"
msgstr ""

#: ../api/operations.rst:171
msgid "The built-in operation objects are listed below."
msgstr ""

#: alembic.operations.ops.AddColumnOp:1 of
msgid "Represent an add column operation."
msgstr ""

#: alembic.operations.ops.AddColumnOp.add_column:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.add_column` method."
msgstr ""

#: alembic.operations.ops.AddColumnOp.batch_add_column:1 of
msgid ""
"This method is proxied on the :class:`.BatchOperations` class, via the "
":meth:`.BatchOperations.add_column` method."
msgstr ""

#: alembic.operations.ops.AddConstraintOp:1 of
msgid "Represent an add constraint operation."
msgstr ""

#: alembic.operations.ops.AlterColumnOp:1 of
msgid "Represent an alter column operation."
msgstr ""

#: alembic.operations.ops.AlterColumnOp.alter_column:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.alter_column` method."
msgstr ""

#: alembic.operations.ops.AlterColumnOp.batch_alter_column:1 of
msgid ""
"This method is proxied on the :class:`.BatchOperations` class, via the "
":meth:`.BatchOperations.alter_column` method."
msgstr ""

#: alembic.operations.ops.AlterTableOp:1 of
msgid "Represent an alter table operation."
msgstr ""

#: alembic.operations.ops.BulkInsertOp:1 of
msgid "Represent a bulk insert operation."
msgstr ""

#: alembic.operations.ops.BulkInsertOp.bulk_insert:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.bulk_insert` method."
msgstr ""

#: alembic.operations.ops.CreateCheckConstraintOp:1 of
msgid "Represent a create check constraint operation."
msgstr ""

#: alembic.operations.ops.CreateCheckConstraintOp.batch_create_check_constraint:1
#: of
msgid ""
"This method is proxied on the :class:`.BatchOperations` class, via the "
":meth:`.BatchOperations.create_check_constraint` method."
msgstr ""

#: alembic.operations.ops.CreateCheckConstraintOp.create_check_constraint:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.create_check_constraint` method."
msgstr ""

#: alembic.operations.ops.CreateForeignKeyOp:1 of
msgid "Represent a create foreign key constraint operation."
msgstr ""

#: alembic.operations.ops.CreateForeignKeyOp.batch_create_foreign_key:1 of
msgid ""
"This method is proxied on the :class:`.BatchOperations` class, via the "
":meth:`.BatchOperations.create_foreign_key` method."
msgstr ""

#: alembic.operations.ops.CreateForeignKeyOp.create_foreign_key:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.create_foreign_key` method."
msgstr ""

#: alembic.operations.ops.CreateIndexOp:1 of
msgid "Represent a create index operation."
msgstr ""

#: alembic.operations.ops.CreateIndexOp.batch_create_index:1 of
msgid ""
"This method is proxied on the :class:`.BatchOperations` class, via the "
":meth:`.BatchOperations.create_index` method."
msgstr ""

#: alembic.operations.ops.CreateIndexOp.create_index:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.create_index` method."
msgstr ""

#: alembic.operations.ops.CreatePrimaryKeyOp:1 of
msgid "Represent a create primary key operation."
msgstr ""

#: alembic.operations.ops.CreatePrimaryKeyOp.batch_create_primary_key:1 of
msgid ""
"This method is proxied on the :class:`.BatchOperations` class, via the "
":meth:`.BatchOperations.create_primary_key` method."
msgstr ""

#: alembic.operations.ops.CreatePrimaryKeyOp.create_primary_key:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.create_primary_key` method."
msgstr ""

#: alembic.operations.ops.CreateTableCommentOp:1 of
msgid "Represent a COMMENT ON `table` operation."
msgstr ""

#: alembic.operations.ops.CreateTableCommentOp.create_table_comment:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.create_table_comment` method."
msgstr ""

#: alembic.operations.ops.CreateTableCommentOp.reverse:1
#: alembic.operations.ops.DropTableCommentOp.reverse:1 of
msgid "Reverses the COMMENT ON operation against a table."
msgstr ""

#: alembic.operations.ops.CreateTableOp:1 of
msgid "Represent a create table operation."
msgstr ""

#: alembic.operations.ops.CreateTableOp.create_table:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.create_table` method."
msgstr ""

#: alembic.operations.ops.CreateUniqueConstraintOp:1 of
msgid "Represent a create unique constraint operation."
msgstr ""

#: alembic.operations.ops.CreateUniqueConstraintOp.batch_create_unique_constraint:1
#: of
msgid ""
"This method is proxied on the :class:`.BatchOperations` class, via the "
":meth:`.BatchOperations.create_unique_constraint` method."
msgstr ""

#: alembic.operations.ops.CreateUniqueConstraintOp.create_unique_constraint:1
#: of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.create_unique_constraint` method."
msgstr ""

#: alembic.operations.ops.DowngradeOps:1 of
msgid ""
"contains a sequence of operations that would apply to the 'downgrade' "
"stream of a script."
msgstr ""

#: alembic.operations.ops.DropColumnOp:1 of
msgid "Represent a drop column operation."
msgstr ""

#: alembic.operations.ops.DropColumnOp.batch_drop_column:1 of
msgid ""
"This method is proxied on the :class:`.BatchOperations` class, via the "
":meth:`.BatchOperations.drop_column` method."
msgstr ""

#: alembic.operations.ops.DropColumnOp.drop_column:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.drop_column` method."
msgstr ""

#: alembic.operations.ops.DropConstraintOp:1 of
msgid "Represent a drop constraint operation."
msgstr ""

#: alembic.operations.ops.DropConstraintOp.batch_drop_constraint:1 of
msgid ""
"This method is proxied on the :class:`.BatchOperations` class, via the "
":meth:`.BatchOperations.drop_constraint` method."
msgstr ""

#: alembic.operations.ops.DropConstraintOp.drop_constraint:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.drop_constraint` method."
msgstr ""

#: alembic.operations.ops.DropIndexOp:1 of
msgid "Represent a drop index operation."
msgstr ""

#: alembic.operations.ops.DropIndexOp.batch_drop_index:1 of
msgid ""
"This method is proxied on the :class:`.BatchOperations` class, via the "
":meth:`.BatchOperations.drop_index` method."
msgstr ""

#: alembic.operations.ops.DropIndexOp.drop_index:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.drop_index` method."
msgstr ""

#: alembic.operations.ops.DropTableCommentOp:1 of
msgid "Represent an operation to remove the comment from a table."
msgstr ""

#: alembic.operations.ops.DropTableCommentOp.drop_table_comment:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.drop_table_comment` method."
msgstr ""

#: alembic.operations.ops.DropTableOp:1 of
msgid "Represent a drop table operation."
msgstr ""

#: alembic.operations.ops.DropTableOp.drop_table:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.drop_table` method."
msgstr ""

#: alembic.operations.ops.ExecuteSQLOp:1 of
msgid "Represent an execute SQL operation."
msgstr ""

#: alembic.operations.ops.ExecuteSQLOp.execute:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.execute` method."
msgstr ""

#: alembic.operations.ops.MigrateOperation:1 of
msgid "base class for migration command and organization objects."
msgstr ""

#: alembic.operations.ops.MigrateOperation:3 of
msgid "This system is part of the operation extensibility API."
msgstr ""

#: alembic.operations.ops.MigrateOperation:9 of
msgid ":ref:`operation_objects`"
msgstr ""

#: alembic.operations.ops.MigrateOperation.info:1 of
msgid ""
"A dictionary that may be used to store arbitrary information along with "
"this :class:`.MigrateOperation` object."
msgstr ""

#: alembic.operations.ops.MigrationScript:1 of
msgid "represents a migration script."
msgstr ""

#: alembic.operations.ops.MigrationScript:3 of
msgid ""
"E.g. when autogenerate encounters this object, this corresponds to the "
"production of an actual script file."
msgstr ""

#: alembic.operations.ops.MigrationScript:6 of
msgid ""
"A normal :class:`.MigrationScript` object would contain a single "
":class:`.UpgradeOps` and a single :class:`.DowngradeOps` directive. These"
" are accessible via the ``.upgrade_ops`` and ``.downgrade_ops`` "
"attributes."
msgstr ""

#: alembic.operations.ops.MigrationScript:11 of
msgid ""
"In the case of an autogenerate operation that runs multiple times, such "
"as the multiple database example in the \"multidb\" template, the "
"``.upgrade_ops`` and ``.downgrade_ops`` attributes are disabled, and "
"instead these objects should be accessed via the ``.upgrade_ops_list`` "
"and ``.downgrade_ops_list`` list-based attributes.  These latter "
"attributes are always available at the very least as single-element "
"lists."
msgstr ""

#: alembic.operations.ops.MigrationScript:18 of
msgid ""
"the ``.upgrade_ops`` and ``.downgrade_ops`` attributes should be accessed"
" via the ``.upgrade_ops_list`` and ``.downgrade_ops_list`` attributes if "
"multiple autogenerate passes proceed on the same "
":class:`.MigrationScript` object."
msgstr ""

#: alembic.operations.ops.MigrationScript.downgrade_ops:1 of
msgid "An instance of :class:`.DowngradeOps`."
msgstr ""

#: alembic.operations.ops.MigrationScript.downgrade_ops:5 of
msgid ":attr:`.MigrationScript.downgrade_ops_list`"
msgstr ""

#: alembic.operations.ops.MigrationScript.downgrade_ops_list:1 of
msgid "A list of :class:`.DowngradeOps` instances."
msgstr ""

#: alembic.operations.ops.MigrationScript.downgrade_ops_list:3 of
msgid ""
"This is used in place of the :attr:`.MigrationScript.downgrade_ops` "
"attribute when dealing with a revision operation that does multiple "
"autogenerate passes."
msgstr ""

#: alembic.operations.ops.MigrationScript.upgrade_ops:1 of
msgid "An instance of :class:`.UpgradeOps`."
msgstr ""

#: alembic.operations.ops.MigrationScript.upgrade_ops:5 of
msgid ":attr:`.MigrationScript.upgrade_ops_list`"
msgstr ""

#: alembic.operations.ops.MigrationScript.upgrade_ops_list:1 of
msgid "A list of :class:`.UpgradeOps` instances."
msgstr ""

#: alembic.operations.ops.MigrationScript.upgrade_ops_list:3 of
msgid ""
"This is used in place of the :attr:`.MigrationScript.upgrade_ops` "
"attribute when dealing with a revision operation that does multiple "
"autogenerate passes."
msgstr ""

#: alembic.operations.ops.ModifyTableOps:1 of
msgid "Contains a sequence of operations that all apply to a single Table."
msgstr ""

#: alembic.operations.ops.OpContainer:1 of
msgid "Represent a sequence of operations operation."
msgstr ""

#: alembic.operations.ops.RenameTableOp:1 of
msgid "Represent a rename table operation."
msgstr ""

#: alembic.operations.ops.RenameTableOp.rename_table:1 of
msgid ""
"This method is proxied on the :class:`.Operations` class, via the "
":meth:`.Operations.rename_table` method."
msgstr ""

#: alembic.operations.ops.UpgradeOps:1 of
msgid ""
"contains a sequence of operations that would apply to the 'upgrade' "
"stream of a script."
msgstr ""

